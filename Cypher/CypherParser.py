# Generated from Cypher.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0081")
        buf.write("\u0607\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\5\2\u00ca\n\2\3")
        buf.write("\2\3\2\5\2\u00ce\n\2\3\2\5\2\u00d1\n\2\3\2\5\2\u00d4\n")
        buf.write("\2\3\2\3\2\3\3\3\3\3\4\3\4\5\4\u00dc\n\4\3\5\3\5\5\5\u00e0")
        buf.write("\n\5\3\5\7\5\u00e3\n\5\f\5\16\5\u00e6\13\5\3\6\3\6\3\6")
        buf.write("\3\6\5\6\u00ec\n\6\3\6\3\6\3\6\5\6\u00f1\n\6\3\6\5\6\u00f4")
        buf.write("\n\6\3\7\3\7\5\7\u00f8\n\7\3\b\3\b\5\b\u00fc\n\b\7\b\u00fe")
        buf.write("\n\b\f\b\16\b\u0101\13\b\3\b\3\b\3\b\5\b\u0106\n\b\7\b")
        buf.write("\u0108\n\b\f\b\16\b\u010b\13\b\3\b\3\b\5\b\u010f\n\b\3")
        buf.write("\b\7\b\u0112\n\b\f\b\16\b\u0115\13\b\3\b\5\b\u0118\n\b")
        buf.write("\3\b\5\b\u011b\n\b\5\b\u011d\n\b\3\t\3\t\5\t\u0121\n\t")
        buf.write("\7\t\u0123\n\t\f\t\16\t\u0126\13\t\3\t\3\t\5\t\u012a\n")
        buf.write("\t\7\t\u012c\n\t\f\t\16\t\u012f\13\t\3\t\3\t\5\t\u0133")
        buf.write("\n\t\6\t\u0135\n\t\r\t\16\t\u0136\3\t\3\t\3\n\3\n\3\n")
        buf.write("\3\n\3\n\5\n\u0140\n\n\3\13\3\13\3\13\5\13\u0145\n\13")
        buf.write("\3\f\3\f\5\f\u0149\n\f\3\f\3\f\5\f\u014d\n\f\3\f\3\f\5")
        buf.write("\f\u0151\n\f\3\f\5\f\u0154\n\f\3\r\3\r\5\r\u0158\n\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\5\16\u0162\n\16\3\16")
        buf.write("\3\16\3\16\7\16\u0167\n\16\f\16\16\16\u016a\13\16\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0176")
        buf.write("\n\17\3\20\3\20\5\20\u017a\n\20\3\20\3\20\3\21\3\21\5")
        buf.write("\21\u0180\n\21\3\21\3\21\3\21\7\21\u0185\n\21\f\21\16")
        buf.write("\21\u0188\13\21\3\22\3\22\5\22\u018c\n\22\3\22\3\22\5")
        buf.write("\22\u0190\n\22\3\22\3\22\3\22\3\22\5\22\u0196\n\22\3\22")
        buf.write("\3\22\5\22\u019a\n\22\3\22\3\22\3\22\3\22\5\22\u01a0\n")
        buf.write("\22\3\22\3\22\5\22\u01a4\n\22\3\22\3\22\3\22\3\22\5\22")
        buf.write("\u01aa\n\22\3\22\3\22\5\22\u01ae\n\22\3\23\3\23\5\23\u01b2")
        buf.write("\n\23\3\23\3\23\5\23\u01b6\n\23\3\23\3\23\5\23\u01ba\n")
        buf.write("\23\3\23\3\23\5\23\u01be\n\23\3\23\7\23\u01c1\n\23\f\23")
        buf.write("\16\23\u01c4\13\23\3\24\3\24\3\24\3\24\5\24\u01ca\n\24")
        buf.write("\3\24\3\24\5\24\u01ce\n\24\3\24\7\24\u01d1\n\24\f\24\16")
        buf.write("\24\u01d4\13\24\3\25\3\25\3\25\3\25\5\25\u01da\n\25\3")
        buf.write("\26\3\26\3\26\3\26\5\26\u01e0\n\26\3\26\3\26\3\26\5\26")
        buf.write("\u01e5\n\26\3\27\3\27\3\27\3\27\5\27\u01eb\n\27\3\27\3")
        buf.write("\27\3\27\3\27\5\27\u01f1\n\27\3\30\3\30\3\30\5\30\u01f6")
        buf.write("\n\30\3\30\3\30\5\30\u01fa\n\30\3\30\7\30\u01fd\n\30\f")
        buf.write("\30\16\30\u0200\13\30\5\30\u0202\n\30\3\30\5\30\u0205")
        buf.write("\n\30\3\30\5\30\u0208\n\30\3\31\3\31\3\31\3\31\3\31\5")
        buf.write("\31\u020f\n\31\3\31\3\31\3\32\3\32\3\32\5\32\u0216\n\32")
        buf.write("\3\32\5\32\u0219\n\32\3\33\3\33\3\33\3\34\5\34\u021f\n")
        buf.write("\34\3\34\5\34\u0222\n\34\3\34\3\34\3\34\3\34\5\34\u0228")
        buf.write("\n\34\3\34\3\34\5\34\u022c\n\34\3\34\3\34\5\34\u0230\n")
        buf.write("\34\3\35\3\35\5\35\u0234\n\35\3\35\3\35\5\35\u0238\n\35")
        buf.write("\3\35\7\35\u023b\n\35\f\35\16\35\u023e\13\35\3\35\3\35")
        buf.write("\5\35\u0242\n\35\3\35\3\35\5\35\u0246\n\35\3\35\7\35\u0249")
        buf.write("\n\35\f\35\16\35\u024c\13\35\5\35\u024e\n\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u0257\n\36\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u0260\n\37\3\37\7\37\u0263")
        buf.write("\n\37\f\37\16\37\u0266\13\37\3 \3 \3 \3 \3!\3!\3!\3!\3")
        buf.write("\"\3\"\5\"\u0272\n\"\3\"\5\"\u0275\n\"\3#\3#\3#\3#\3$")
        buf.write("\3$\5$\u027d\n$\3$\3$\5$\u0281\n$\3$\7$\u0284\n$\f$\16")
        buf.write("$\u0287\13$\3%\3%\5%\u028b\n%\3%\3%\5%\u028f\n%\3%\3%")
        buf.write("\3%\5%\u0294\n%\3&\3&\3\'\3\'\5\'\u029a\n\'\3\'\7\'\u029d")
        buf.write("\n\'\f\'\16\'\u02a0\13\'\3\'\3\'\3\'\3\'\5\'\u02a6\n\'")
        buf.write("\3(\3(\5(\u02aa\n(\3(\3(\5(\u02ae\n(\5(\u02b0\n(\3(\3")
        buf.write("(\5(\u02b4\n(\5(\u02b6\n(\3(\3(\5(\u02ba\n(\5(\u02bc\n")
        buf.write("(\3(\3(\3)\3)\5)\u02c2\n)\3)\3)\3*\3*\5*\u02c8\n*\3*\3")
        buf.write("*\5*\u02cc\n*\3*\5*\u02cf\n*\3*\5*\u02d2\n*\3*\3*\5*\u02d6")
        buf.write("\n*\3*\3*\3*\3*\5*\u02dc\n*\3*\3*\5*\u02e0\n*\3*\5*\u02e3")
        buf.write("\n*\3*\5*\u02e6\n*\3*\3*\3*\3*\5*\u02ec\n*\3*\5*\u02ef")
        buf.write("\n*\3*\5*\u02f2\n*\3*\3*\5*\u02f6\n*\3*\3*\3*\3*\5*\u02fc")
        buf.write("\n*\3*\5*\u02ff\n*\3*\5*\u0302\n*\3*\3*\5*\u0306\n*\3")
        buf.write("+\3+\5+\u030a\n+\3+\3+\5+\u030e\n+\5+\u0310\n+\3+\3+\5")
        buf.write("+\u0314\n+\5+\u0316\n+\3+\5+\u0319\n+\3+\3+\5+\u031d\n")
        buf.write("+\5+\u031f\n+\3+\3+\3,\3,\5,\u0325\n,\3-\3-\5-\u0329\n")
        buf.write("-\3-\3-\5-\u032d\n-\3-\3-\5-\u0331\n-\3-\5-\u0334\n-\3")
        buf.write("-\7-\u0337\n-\f-\16-\u033a\13-\3.\3.\5.\u033e\n.\3.\7")
        buf.write(".\u0341\n.\f.\16.\u0344\13.\3/\3/\5/\u0348\n/\3/\3/\3")
        buf.write("\60\3\60\5\60\u034e\n\60\3\60\3\60\5\60\u0352\n\60\5\60")
        buf.write("\u0354\n\60\3\60\3\60\5\60\u0358\n\60\3\60\3\60\5\60\u035c")
        buf.write("\n\60\5\60\u035e\n\60\5\60\u0360\n\60\3\61\3\61\3\62\3")
        buf.write("\62\3\63\3\63\3\64\3\64\3\64\3\64\3\64\7\64\u036d\n\64")
        buf.write("\f\64\16\64\u0370\13\64\3\65\3\65\3\65\3\65\3\65\7\65")
        buf.write("\u0377\n\65\f\65\16\65\u037a\13\65\3\66\3\66\3\66\3\66")
        buf.write("\3\66\7\66\u0381\n\66\f\66\16\66\u0384\13\66\3\67\3\67")
        buf.write("\5\67\u0388\n\67\7\67\u038a\n\67\f\67\16\67\u038d\13\67")
        buf.write("\3\67\3\67\38\38\58\u0393\n8\38\78\u0396\n8\f8\168\u0399")
        buf.write("\138\39\39\59\u039d\n9\39\39\59\u03a1\n9\39\39\59\u03a5")
        buf.write("\n9\39\39\59\u03a9\n9\39\79\u03ac\n9\f9\169\u03af\139")
        buf.write("\3:\3:\5:\u03b3\n:\3:\3:\5:\u03b7\n:\3:\3:\5:\u03bb\n")
        buf.write(":\3:\3:\5:\u03bf\n:\3:\3:\5:\u03c3\n:\3:\3:\5:\u03c7\n")
        buf.write(":\3:\7:\u03ca\n:\f:\16:\u03cd\13:\3;\3;\5;\u03d1\n;\3")
        buf.write(";\3;\5;\u03d5\n;\3;\7;\u03d8\n;\f;\16;\u03db\13;\3<\3")
        buf.write("<\5<\u03df\n<\7<\u03e1\n<\f<\16<\u03e4\13<\3<\3<\3=\3")
        buf.write("=\3=\3=\7=\u03ec\n=\f=\16=\u03ef\13=\3>\3>\3>\5>\u03f4")
        buf.write("\n>\3>\3>\5>\u03f8\n>\3>\3>\3>\3>\3>\5>\u03ff\n>\3>\3")
        buf.write(">\5>\u0403\n>\3>\3>\5>\u0407\n>\3>\5>\u040a\n>\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\5?\u0416\n?\3?\5?\u0419\n?\3?\3")
        buf.write("?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0427\n@\3A\3A\5A\u042b")
        buf.write("\nA\3A\7A\u042e\nA\fA\16A\u0431\13A\3A\5A\u0434\nA\3A")
        buf.write("\5A\u0437\nA\3B\3B\3B\3B\3B\5B\u043e\nB\3B\3B\5B\u0442")
        buf.write("\nB\3B\3B\5B\u0446\nB\3B\3B\3B\3B\3B\5B\u044d\nB\3B\3")
        buf.write("B\5B\u0451\nB\3B\3B\5B\u0455\nB\3B\3B\3B\3B\5B\u045b\n")
        buf.write("B\3B\3B\5B\u045f\nB\3B\3B\5B\u0463\nB\3B\3B\3B\3B\5B\u0469")
        buf.write("\nB\3B\3B\5B\u046d\nB\3B\3B\5B\u0471\nB\3B\3B\3B\3B\5")
        buf.write("B\u0477\nB\3B\3B\5B\u047b\nB\3B\3B\5B\u047f\nB\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u0487\nB\3C\3C\3C\3C\3C\3C\5C\u048f\nC\3")
        buf.write("D\3D\3E\3E\5E\u0495\nE\3E\3E\5E\u0499\nE\3E\3E\5E\u049d")
        buf.write("\nE\3E\3E\5E\u04a1\nE\7E\u04a3\nE\fE\16E\u04a6\13E\5E")
        buf.write("\u04a8\nE\3E\3E\3F\3F\5F\u04ae\nF\3F\3F\3F\5F\u04b3\n")
        buf.write("F\3F\3F\3F\5F\u04b8\nF\3F\3F\3F\5F\u04bd\nF\3F\3F\3F\5")
        buf.write("F\u04c2\nF\3F\3F\3F\5F\u04c7\nF\3F\5F\u04ca\nF\3G\3G\5")
        buf.write("G\u04ce\nG\3G\3G\5G\u04d2\nG\3G\3G\3H\3H\5H\u04d8\nH\3")
        buf.write("H\6H\u04db\nH\rH\16H\u04dc\3I\3I\5I\u04e1\nI\3I\5I\u04e4")
        buf.write("\nI\3J\3J\3J\3J\3J\3J\3K\3K\5K\u04ee\nK\3K\3K\5K\u04f2")
        buf.write("\nK\3K\3K\5K\u04f6\nK\5K\u04f8\nK\3K\3K\5K\u04fc\nK\3")
        buf.write("K\3K\5K\u0500\nK\3K\3K\5K\u0504\nK\7K\u0506\nK\fK\16K")
        buf.write("\u0509\13K\5K\u050b\nK\3K\3K\3L\3L\3L\3L\5L\u0513\nL\3")
        buf.write("M\3M\5M\u0517\nM\3M\3M\5M\u051b\nM\3M\3M\5M\u051f\nM\3")
        buf.write("M\3M\5M\u0523\nM\3M\3M\5M\u0527\nM\7M\u0529\nM\fM\16M")
        buf.write("\u052c\13M\5M\u052e\nM\3M\3M\3N\3N\3O\3O\3P\3P\3P\3Q\3")
        buf.write("Q\3Q\7Q\u053c\nQ\fQ\16Q\u053f\13Q\3R\3R\5R\u0543\nR\3")
        buf.write("R\3R\5R\u0547\nR\3R\3R\5R\u054b\nR\3R\5R\u054e\nR\3R\5")
        buf.write("R\u0551\nR\3R\3R\3S\3S\5S\u0557\nS\3S\3S\5S\u055b\nS\3")
        buf.write("S\3S\5S\u055f\nS\5S\u0561\nS\3S\3S\5S\u0565\nS\3S\3S\5")
        buf.write("S\u0569\nS\3S\3S\5S\u056d\nS\5S\u056f\nS\3S\3S\5S\u0573")
        buf.write("\nS\3S\3S\5S\u0577\nS\3S\3S\3T\3T\5T\u057d\nT\3T\3T\3")
        buf.write("U\3U\5U\u0583\nU\3U\6U\u0586\nU\rU\16U\u0587\3U\3U\5U")
        buf.write("\u058c\nU\3U\3U\5U\u0590\nU\3U\6U\u0593\nU\rU\16U\u0594")
        buf.write("\5U\u0597\nU\3U\5U\u059a\nU\3U\3U\5U\u059e\nU\3U\5U\u05a1")
        buf.write("\nU\3U\5U\u05a4\nU\3U\3U\3V\3V\5V\u05aa\nV\3V\3V\5V\u05ae")
        buf.write("\nV\3V\3V\5V\u05b2\nV\3V\3V\3W\3W\3X\3X\5X\u05ba\nX\3")
        buf.write("Y\3Y\5Y\u05be\nY\3Y\3Y\5Y\u05c2\nY\3Y\3Y\5Y\u05c6\nY\3")
        buf.write("Y\3Y\5Y\u05ca\nY\3Y\3Y\5Y\u05ce\nY\3Y\3Y\5Y\u05d2\nY\3")
        buf.write("Y\3Y\5Y\u05d6\nY\3Y\3Y\5Y\u05da\nY\7Y\u05dc\nY\fY\16Y")
        buf.write("\u05df\13Y\5Y\u05e1\nY\3Y\3Y\3Z\3Z\3Z\5Z\u05e8\nZ\3[\3")
        buf.write("[\5[\u05ec\n[\3[\6[\u05ef\n[\r[\16[\u05f0\3\\\3\\\3]\3")
        buf.write("]\3^\3^\3_\3_\5_\u05fb\n_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3")
        buf.write("d\3d\2\2e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~")
        buf.write("\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\2\f\3\2FI\3\2\17\20\3\2YZ\3\2ce\3\2mn\6\2\60<?TY`ox\6")
        buf.write("\2UXffy{~~\4\2\25\25\35 \4\2\26\26!$\4\2\20\20%/\2\u06de")
        buf.write("\2\u00c9\3\2\2\2\4\u00d7\3\2\2\2\6\u00db\3\2\2\2\b\u00dd")
        buf.write("\3\2\2\2\n\u00f3\3\2\2\2\f\u00f7\3\2\2\2\16\u011c\3\2")
        buf.write("\2\2\20\u0134\3\2\2\2\22\u013f\3\2\2\2\24\u0144\3\2\2")
        buf.write("\2\26\u0148\3\2\2\2\30\u0155\3\2\2\2\32\u015f\3\2\2\2")
        buf.write("\34\u0175\3\2\2\2\36\u0177\3\2\2\2 \u017d\3\2\2\2\"\u01ad")
        buf.write("\3\2\2\2$\u01b1\3\2\2\2&\u01c5\3\2\2\2(\u01d9\3\2\2\2")
        buf.write("*\u01db\3\2\2\2,\u01e6\3\2\2\2.\u0201\3\2\2\2\60\u020e")
        buf.write("\3\2\2\2\62\u0212\3\2\2\2\64\u021a\3\2\2\2\66\u0221\3")
        buf.write("\2\2\28\u024d\3\2\2\2:\u0256\3\2\2\2<\u0258\3\2\2\2>\u0267")
        buf.write("\3\2\2\2@\u026b\3\2\2\2B\u026f\3\2\2\2D\u0276\3\2\2\2")
        buf.write("F\u027a\3\2\2\2H\u0293\3\2\2\2J\u0295\3\2\2\2L\u02a5\3")
        buf.write("\2\2\2N\u02a7\3\2\2\2P\u02bf\3\2\2\2R\u0305\3\2\2\2T\u0307")
        buf.write("\3\2\2\2V\u0324\3\2\2\2X\u0326\3\2\2\2Z\u033b\3\2\2\2")
        buf.write("\\\u0345\3\2\2\2^\u034b\3\2\2\2`\u0361\3\2\2\2b\u0363")
        buf.write("\3\2\2\2d\u0365\3\2\2\2f\u0367\3\2\2\2h\u0371\3\2\2\2")
        buf.write("j\u037b\3\2\2\2l\u038b\3\2\2\2n\u0390\3\2\2\2p\u039a\3")
        buf.write("\2\2\2r\u03b0\3\2\2\2t\u03ce\3\2\2\2v\u03e2\3\2\2\2x\u03e7")
        buf.write("\3\2\2\2z\u0409\3\2\2\2|\u0415\3\2\2\2~\u0426\3\2\2\2")
        buf.write("\u0080\u0428\3\2\2\2\u0082\u0486\3\2\2\2\u0084\u048e\3")
        buf.write("\2\2\2\u0086\u0490\3\2\2\2\u0088\u0492\3\2\2\2\u008a\u04c9")
        buf.write("\3\2\2\2\u008c\u04cb\3\2\2\2\u008e\u04d5\3\2\2\2\u0090")
        buf.write("\u04de\3\2\2\2\u0092\u04e5\3\2\2\2\u0094\u04eb\3\2\2\2")
        buf.write("\u0096\u0512\3\2\2\2\u0098\u0514\3\2\2\2\u009a\u0531\3")
        buf.write("\2\2\2\u009c\u0533\3\2\2\2\u009e\u0535\3\2\2\2\u00a0\u053d")
        buf.write("\3\2\2\2\u00a2\u0540\3\2\2\2\u00a4\u0554\3\2\2\2\u00a6")
        buf.write("\u057a\3\2\2\2\u00a8\u0596\3\2\2\2\u00aa\u05a7\3\2\2\2")
        buf.write("\u00ac\u05b5\3\2\2\2\u00ae\u05b9\3\2\2\2\u00b0\u05bb\3")
        buf.write("\2\2\2\u00b2\u05e4\3\2\2\2\u00b4\u05e9\3\2\2\2\u00b6\u05f2")
        buf.write("\3\2\2\2\u00b8\u05f4\3\2\2\2\u00ba\u05f6\3\2\2\2\u00bc")
        buf.write("\u05fa\3\2\2\2\u00be\u05fc\3\2\2\2\u00c0\u05fe\3\2\2\2")
        buf.write("\u00c2\u0600\3\2\2\2\u00c4\u0602\3\2\2\2\u00c6\u0604\3")
        buf.write("\2\2\2\u00c8\u00ca\7\177\2\2\u00c9\u00c8\3\2\2\2\u00c9")
        buf.write("\u00ca\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00d0\5\4\3\2")
        buf.write("\u00cc\u00ce\7\177\2\2\u00cd\u00cc\3\2\2\2\u00cd\u00ce")
        buf.write("\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d1\7\3\2\2\u00d0")
        buf.write("\u00cd\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d3\3\2\2\2")
        buf.write("\u00d2\u00d4\7\177\2\2\u00d3\u00d2\3\2\2\2\u00d3\u00d4")
        buf.write("\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5\u00d6\7\2\2\3\u00d6")
        buf.write("\3\3\2\2\2\u00d7\u00d8\5\6\4\2\u00d8\5\3\2\2\2\u00d9\u00dc")
        buf.write("\5\b\5\2\u00da\u00dc\5,\27\2\u00db\u00d9\3\2\2\2\u00db")
        buf.write("\u00da\3\2\2\2\u00dc\7\3\2\2\2\u00dd\u00e4\5\f\7\2\u00de")
        buf.write("\u00e0\7\177\2\2\u00df\u00de\3\2\2\2\u00df\u00e0\3\2\2")
        buf.write("\2\u00e0\u00e1\3\2\2\2\u00e1\u00e3\5\n\6\2\u00e2\u00df")
        buf.write("\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4")
        buf.write("\u00e5\3\2\2\2\u00e5\t\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7")
        buf.write("\u00e8\7\60\2\2\u00e8\u00e9\7\177\2\2\u00e9\u00eb\7\61")
        buf.write("\2\2\u00ea\u00ec\7\177\2\2\u00eb\u00ea\3\2\2\2\u00eb\u00ec")
        buf.write("\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00f4\5\f\7\2\u00ee")
        buf.write("\u00f0\7\60\2\2\u00ef\u00f1\7\177\2\2\u00f0\u00ef\3\2")
        buf.write("\2\2\u00f0\u00f1\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f4")
        buf.write("\5\f\7\2\u00f3\u00e7\3\2\2\2\u00f3\u00ee\3\2\2\2\u00f4")
        buf.write("\13\3\2\2\2\u00f5\u00f8\5\16\b\2\u00f6\u00f8\5\20\t\2")
        buf.write("\u00f7\u00f5\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f8\r\3\2\2")
        buf.write("\2\u00f9\u00fb\5\24\13\2\u00fa\u00fc\7\177\2\2\u00fb\u00fa")
        buf.write("\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fe\3\2\2\2\u00fd")
        buf.write("\u00f9\3\2\2\2\u00fe\u0101\3\2\2\2\u00ff\u00fd\3\2\2\2")
        buf.write("\u00ff\u0100\3\2\2\2\u0100\u0102\3\2\2\2\u0101\u00ff\3")
        buf.write("\2\2\2\u0102\u011d\5\64\33\2\u0103\u0105\5\24\13\2\u0104")
        buf.write("\u0106\7\177\2\2\u0105\u0104\3\2\2\2\u0105\u0106\3\2\2")
        buf.write("\2\u0106\u0108\3\2\2\2\u0107\u0103\3\2\2\2\u0108\u010b")
        buf.write("\3\2\2\2\u0109\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a")
        buf.write("\u010c\3\2\2\2\u010b\u0109\3\2\2\2\u010c\u0113\5\22\n")
        buf.write("\2\u010d\u010f\7\177\2\2\u010e\u010d\3\2\2\2\u010e\u010f")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0112\5\22\n\2\u0111")
        buf.write("\u010e\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111\3\2\2\2")
        buf.write("\u0113\u0114\3\2\2\2\u0114\u011a\3\2\2\2\u0115\u0113\3")
        buf.write("\2\2\2\u0116\u0118\7\177\2\2\u0117\u0116\3\2\2\2\u0117")
        buf.write("\u0118\3\2\2\2\u0118\u0119\3\2\2\2\u0119\u011b\5\64\33")
        buf.write("\2\u011a\u0117\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d")
        buf.write("\3\2\2\2\u011c\u00ff\3\2\2\2\u011c\u0109\3\2\2\2\u011d")
        buf.write("\17\3\2\2\2\u011e\u0120\5\24\13\2\u011f\u0121\7\177\2")
        buf.write("\2\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0123")
        buf.write("\3\2\2\2\u0122\u011e\3\2\2\2\u0123\u0126\3\2\2\2\u0124")
        buf.write("\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125\u012d\3\2\2\2")
        buf.write("\u0126\u0124\3\2\2\2\u0127\u0129\5\22\n\2\u0128\u012a")
        buf.write("\7\177\2\2\u0129\u0128\3\2\2\2\u0129\u012a\3\2\2\2\u012a")
        buf.write("\u012c\3\2\2\2\u012b\u0127\3\2\2\2\u012c\u012f\3\2\2\2")
        buf.write("\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u0130\3")
        buf.write("\2\2\2\u012f\u012d\3\2\2\2\u0130\u0132\5\62\32\2\u0131")
        buf.write("\u0133\7\177\2\2\u0132\u0131\3\2\2\2\u0132\u0133\3\2\2")
        buf.write("\2\u0133\u0135\3\2\2\2\u0134\u0124\3\2\2\2\u0135\u0136")
        buf.write("\3\2\2\2\u0136\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u0138\3\2\2\2\u0138\u0139\5\16\b\2\u0139\21\3\2\2\2\u013a")
        buf.write("\u0140\5\36\20\2\u013b\u0140\5\32\16\2\u013c\u0140\5$")
        buf.write("\23\2\u013d\u0140\5 \21\2\u013e\u0140\5&\24\2\u013f\u013a")
        buf.write("\3\2\2\2\u013f\u013b\3\2\2\2\u013f\u013c\3\2\2\2\u013f")
        buf.write("\u013d\3\2\2\2\u013f\u013e\3\2\2\2\u0140\23\3\2\2\2\u0141")
        buf.write("\u0145\5\26\f\2\u0142\u0145\5\30\r\2\u0143\u0145\5*\26")
        buf.write("\2\u0144\u0141\3\2\2\2\u0144\u0142\3\2\2\2\u0144\u0143")
        buf.write("\3\2\2\2\u0145\25\3\2\2\2\u0146\u0147\7\62\2\2\u0147\u0149")
        buf.write("\7\177\2\2\u0148\u0146\3\2\2\2\u0148\u0149\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014a\u014c\7\63\2\2\u014b\u014d\7\177")
        buf.write("\2\2\u014c\u014b\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u014e")
        buf.write("\3\2\2\2\u014e\u0153\5F$\2\u014f\u0151\7\177\2\2\u0150")
        buf.write("\u014f\3\2\2\2\u0150\u0151\3\2\2\2\u0151\u0152\3\2\2\2")
        buf.write("\u0152\u0154\5D#\2\u0153\u0150\3\2\2\2\u0153\u0154\3\2")
        buf.write("\2\2\u0154\27\3\2\2\2\u0155\u0157\7\64\2\2\u0156\u0158")
        buf.write("\7\177\2\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\u015a\5d\63\2\u015a\u015b\7\177\2")
        buf.write("\2\u015b\u015c\7\65\2\2\u015c\u015d\7\177\2\2\u015d\u015e")
        buf.write("\5\u00acW\2\u015e\31\3\2\2\2\u015f\u0161\7\66\2\2\u0160")
        buf.write("\u0162\7\177\2\2\u0161\u0160\3\2\2\2\u0161\u0162\3\2\2")
        buf.write("\2\u0162\u0163\3\2\2\2\u0163\u0168\5H%\2\u0164\u0165\7")
        buf.write("\177\2\2\u0165\u0167\5\34\17\2\u0166\u0164\3\2\2\2\u0167")
        buf.write("\u016a\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\33\3\2\2\2\u016a\u0168\3\2\2\2\u016b\u016c\7\67")
        buf.write("\2\2\u016c\u016d\7\177\2\2\u016d\u016e\7\63\2\2\u016e")
        buf.write("\u016f\7\177\2\2\u016f\u0176\5 \21\2\u0170\u0171\7\67")
        buf.write("\2\2\u0171\u0172\7\177\2\2\u0172\u0173\78\2\2\u0173\u0174")
        buf.write("\7\177\2\2\u0174\u0176\5 \21\2\u0175\u016b\3\2\2\2\u0175")
        buf.write("\u0170\3\2\2\2\u0176\35\3\2\2\2\u0177\u0179\78\2\2\u0178")
        buf.write("\u017a\7\177\2\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2")
        buf.write("\2\u017a\u017b\3\2\2\2\u017b\u017c\5F$\2\u017c\37\3\2")
        buf.write("\2\2\u017d\u017f\79\2\2\u017e\u0180\7\177\2\2\u017f\u017e")
        buf.write("\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0181\3\2\2\2\u0181")
        buf.write("\u0186\5\"\22\2\u0182\u0183\7\4\2\2\u0183\u0185\5\"\22")
        buf.write("\2\u0184\u0182\3\2\2\2\u0185\u0188\3\2\2\2\u0186\u0184")
        buf.write("\3\2\2\2\u0186\u0187\3\2\2\2\u0187!\3\2\2\2\u0188\u0186")
        buf.write("\3\2\2\2\u0189\u018b\5\u00b4[\2\u018a\u018c\7\177\2\2")
        buf.write("\u018b\u018a\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018d\3")
        buf.write("\2\2\2\u018d\u018f\7\5\2\2\u018e\u0190\7\177\2\2\u018f")
        buf.write("\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0191\3\2\2\2")
        buf.write("\u0191\u0192\5d\63\2\u0192\u01ae\3\2\2\2\u0193\u0195\5")
        buf.write("\u00acW\2\u0194\u0196\7\177\2\2\u0195\u0194\3\2\2\2\u0195")
        buf.write("\u0196\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0199\7\5\2\2")
        buf.write("\u0198\u019a\7\177\2\2\u0199\u0198\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019c\5d\63\2\u019c")
        buf.write("\u01ae\3\2\2\2\u019d\u019f\5\u00acW\2\u019e\u01a0\7\177")
        buf.write("\2\2\u019f\u019e\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1")
        buf.write("\3\2\2\2\u01a1\u01a3\7\6\2\2\u01a2\u01a4\7\177\2\2\u01a3")
        buf.write("\u01a2\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2")
        buf.write("\u01a5\u01a6\5d\63\2\u01a6\u01ae\3\2\2\2\u01a7\u01a9\5")
        buf.write("\u00acW\2\u01a8\u01aa\7\177\2\2\u01a9\u01a8\3\2\2\2\u01a9")
        buf.write("\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac\5Z.\2\u01ac")
        buf.write("\u01ae\3\2\2\2\u01ad\u0189\3\2\2\2\u01ad\u0193\3\2\2\2")
        buf.write("\u01ad\u019d\3\2\2\2\u01ad\u01a7\3\2\2\2\u01ae#\3\2\2")
        buf.write("\2\u01af\u01b0\7:\2\2\u01b0\u01b2\7\177\2\2\u01b1\u01af")
        buf.write("\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3")
        buf.write("\u01b5\7;\2\2\u01b4\u01b6\7\177\2\2\u01b5\u01b4\3\2\2")
        buf.write("\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01c2")
        buf.write("\5d\63\2\u01b8\u01ba\7\177\2\2\u01b9\u01b8\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bd\7\4\2\2")
        buf.write("\u01bc\u01be\7\177\2\2\u01bd\u01bc\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\5d\63\2\u01c0")
        buf.write("\u01b9\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2")
        buf.write("\u01c2\u01c3\3\2\2\2\u01c3%\3\2\2\2\u01c4\u01c2\3\2\2")
        buf.write("\2\u01c5\u01c6\7<\2\2\u01c6\u01c7\7\177\2\2\u01c7\u01d2")
        buf.write("\5(\25\2\u01c8\u01ca\7\177\2\2\u01c9\u01c8\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u01cd\7\4\2\2")
        buf.write("\u01cc\u01ce\7\177\2\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\5(\25\2\u01d0")
        buf.write("\u01c9\3\2\2\2\u01d1\u01d4\3\2\2\2\u01d2\u01d0\3\2\2\2")
        buf.write("\u01d2\u01d3\3\2\2\2\u01d3\'\3\2\2\2\u01d4\u01d2\3\2\2")
        buf.write("\2\u01d5\u01d6\5\u00acW\2\u01d6\u01d7\5Z.\2\u01d7\u01da")
        buf.write("\3\2\2\2\u01d8\u01da\5\u00b4[\2\u01d9\u01d5\3\2\2\2\u01d9")
        buf.write("\u01d8\3\2\2\2\u01da)\3\2\2\2\u01db\u01dc\7=\2\2\u01dc")
        buf.write("\u01dd\7\177\2\2\u01dd\u01e4\5\u0098M\2\u01de\u01e0\7")
        buf.write("\177\2\2\u01df\u01de\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write("\u01e1\3\2\2\2\u01e1\u01e2\7>\2\2\u01e2\u01e3\7\177\2")
        buf.write("\2\u01e3\u01e5\5.\30\2\u01e4\u01df\3\2\2\2\u01e4\u01e5")
        buf.write("\3\2\2\2\u01e5+\3\2\2\2\u01e6\u01e7\7=\2\2\u01e7\u01ea")
        buf.write("\7\177\2\2\u01e8\u01eb\5\u0098M\2\u01e9\u01eb\5\u009a")
        buf.write("N\2\u01ea\u01e8\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb\u01f0")
        buf.write("\3\2\2\2\u01ec\u01ed\7\177\2\2\u01ed\u01ee\7>\2\2\u01ee")
        buf.write("\u01ef\7\177\2\2\u01ef\u01f1\5.\30\2\u01f0\u01ec\3\2\2")
        buf.write("\2\u01f0\u01f1\3\2\2\2\u01f1-\3\2\2\2\u01f2\u0202\7\7")
        buf.write("\2\2\u01f3\u01fe\5\60\31\2\u01f4\u01f6\7\177\2\2\u01f5")
        buf.write("\u01f4\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f7\3\2\2\2")
        buf.write("\u01f7\u01f9\7\4\2\2\u01f8\u01fa\7\177\2\2\u01f9\u01f8")
        buf.write("\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb")
        buf.write("\u01fd\5\60\31\2\u01fc\u01f5\3\2\2\2\u01fd\u0200\3\2\2")
        buf.write("\2\u01fe\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff\u0202")
        buf.write("\3\2\2\2\u0200\u01fe\3\2\2\2\u0201\u01f2\3\2\2\2\u0201")
        buf.write("\u01f3\3\2\2\2\u0202\u0207\3\2\2\2\u0203\u0205\7\177\2")
        buf.write("\2\u0204\u0203\3\2\2\2\u0204\u0205\3\2\2\2\u0205\u0206")
        buf.write("\3\2\2\2\u0206\u0208\5D#\2\u0207\u0204\3\2\2\2\u0207\u0208")
        buf.write("\3\2\2\2\u0208/\3\2\2\2\u0209\u020a\5\u009cO\2\u020a\u020b")
        buf.write("\7\177\2\2\u020b\u020c\7\65\2\2\u020c\u020d\7\177\2\2")
        buf.write("\u020d\u020f\3\2\2\2\u020e\u0209\3\2\2\2\u020e\u020f\3")
        buf.write("\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211\5\u00acW\2\u0211")
        buf.write("\61\3\2\2\2\u0212\u0213\7?\2\2\u0213\u0218\5\66\34\2\u0214")
        buf.write("\u0216\7\177\2\2\u0215\u0214\3\2\2\2\u0215\u0216\3\2\2")
        buf.write("\2\u0216\u0217\3\2\2\2\u0217\u0219\5D#\2\u0218\u0215\3")
        buf.write("\2\2\2\u0218\u0219\3\2\2\2\u0219\63\3\2\2\2\u021a\u021b")
        buf.write("\7@\2\2\u021b\u021c\5\66\34\2\u021c\65\3\2\2\2\u021d\u021f")
        buf.write("\7\177\2\2\u021e\u021d\3\2\2\2\u021e\u021f\3\2\2\2\u021f")
        buf.write("\u0220\3\2\2\2\u0220\u0222\7A\2\2\u0221\u021e\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\7")
        buf.write("\177\2\2\u0224\u0227\58\35\2\u0225\u0226\7\177\2\2\u0226")
        buf.write("\u0228\5<\37\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2")
        buf.write("\u0228\u022b\3\2\2\2\u0229\u022a\7\177\2\2\u022a\u022c")
        buf.write("\5> \2\u022b\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022e\7\177\2\2\u022e\u0230\5@!\2\u022f")
        buf.write("\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230\67\3\2\2\2\u0231")
        buf.write("\u023c\7\7\2\2\u0232\u0234\7\177\2\2\u0233\u0232\3\2\2")
        buf.write("\2\u0233\u0234\3\2\2\2\u0234\u0235\3\2\2\2\u0235\u0237")
        buf.write("\7\4\2\2\u0236\u0238\7\177\2\2\u0237\u0236\3\2\2\2\u0237")
        buf.write("\u0238\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023b\5:\36\2")
        buf.write("\u023a\u0233\3\2\2\2\u023b\u023e\3\2\2\2\u023c\u023a\3")
        buf.write("\2\2\2\u023c\u023d\3\2\2\2\u023d\u024e\3\2\2\2\u023e\u023c")
        buf.write("\3\2\2\2\u023f\u024a\5:\36\2\u0240\u0242\7\177\2\2\u0241")
        buf.write("\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242\u0243\3\2\2\2")
        buf.write("\u0243\u0245\7\4\2\2\u0244\u0246\7\177\2\2\u0245\u0244")
        buf.write("\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\3\2\2\2\u0247")
        buf.write("\u0249\5:\36\2\u0248\u0241\3\2\2\2\u0249\u024c\3\2\2\2")
        buf.write("\u024a\u0248\3\2\2\2\u024a\u024b\3\2\2\2\u024b\u024e\3")
        buf.write("\2\2\2\u024c\u024a\3\2\2\2\u024d\u0231\3\2\2\2\u024d\u023f")
        buf.write("\3\2\2\2\u024e9\3\2\2\2\u024f\u0250\5d\63\2\u0250\u0251")
        buf.write("\7\177\2\2\u0251\u0252\7\65\2\2\u0252\u0253\7\177\2\2")
        buf.write("\u0253\u0254\5\u00acW\2\u0254\u0257\3\2\2\2\u0255\u0257")
        buf.write("\5d\63\2\u0256\u024f\3\2\2\2\u0256\u0255\3\2\2\2\u0257")
        buf.write(";\3\2\2\2\u0258\u0259\7B\2\2\u0259\u025a\7\177\2\2\u025a")
        buf.write("\u025b\7C\2\2\u025b\u025c\7\177\2\2\u025c\u0264\5B\"\2")
        buf.write("\u025d\u025f\7\4\2\2\u025e\u0260\7\177\2\2\u025f\u025e")
        buf.write("\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u0261\3\2\2\2\u0261")
        buf.write("\u0263\5B\"\2\u0262\u025d\3\2\2\2\u0263\u0266\3\2\2\2")
        buf.write("\u0264\u0262\3\2\2\2\u0264\u0265\3\2\2\2\u0265=\3\2\2")
        buf.write("\2\u0266\u0264\3\2\2\2\u0267\u0268\7D\2\2\u0268\u0269")
        buf.write("\7\177\2\2\u0269\u026a\5d\63\2\u026a?\3\2\2\2\u026b\u026c")
        buf.write("\7E\2\2\u026c\u026d\7\177\2\2\u026d\u026e\5d\63\2\u026e")
        buf.write("A\3\2\2\2\u026f\u0274\5d\63\2\u0270\u0272\7\177\2\2\u0271")
        buf.write("\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u0275\t\2\2\2\u0274\u0271\3\2\2\2\u0274\u0275\3")
        buf.write("\2\2\2\u0275C\3\2\2\2\u0276\u0277\7J\2\2\u0277\u0278\7")
        buf.write("\177\2\2\u0278\u0279\5d\63\2\u0279E\3\2\2\2\u027a\u0285")
        buf.write("\5H%\2\u027b\u027d\7\177\2\2\u027c\u027b\3\2\2\2\u027c")
        buf.write("\u027d\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u0280\7\4\2\2")
        buf.write("\u027f\u0281\7\177\2\2\u0280\u027f\3\2\2\2\u0280\u0281")
        buf.write("\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0284\5H%\2\u0283\u027c")
        buf.write("\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0283\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286G\3\2\2\2\u0287\u0285\3\2\2\2\u0288")
        buf.write("\u028a\5\u00acW\2\u0289\u028b\7\177\2\2\u028a\u0289\3")
        buf.write("\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u028e")
        buf.write("\7\5\2\2\u028d\u028f\7\177\2\2\u028e\u028d\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\5J&\2\u0291")
        buf.write("\u0294\3\2\2\2\u0292\u0294\5J&\2\u0293\u0288\3\2\2\2\u0293")
        buf.write("\u0292\3\2\2\2\u0294I\3\2\2\2\u0295\u0296\5L\'\2\u0296")
        buf.write("K\3\2\2\2\u0297\u029e\5N(\2\u0298\u029a\7\177\2\2\u0299")
        buf.write("\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2")
        buf.write("\u029b\u029d\5P)\2\u029c\u0299\3\2\2\2\u029d\u02a0\3\2")
        buf.write("\2\2\u029e\u029c\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a6")
        buf.write("\3\2\2\2\u02a0\u029e\3\2\2\2\u02a1\u02a2\7\b\2\2\u02a2")
        buf.write("\u02a3\5L\'\2\u02a3\u02a4\7\t\2\2\u02a4\u02a6\3\2\2\2")
        buf.write("\u02a5\u0297\3\2\2\2\u02a5\u02a1\3\2\2\2\u02a6M\3\2\2")
        buf.write("\2\u02a7\u02a9\7\b\2\2\u02a8\u02aa\7\177\2\2\u02a9\u02a8")
        buf.write("\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02af\3\2\2\2\u02ab")
        buf.write("\u02ad\5\u00acW\2\u02ac\u02ae\7\177\2\2\u02ad\u02ac\3")
        buf.write("\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02b0\3\2\2\2\u02af\u02ab")
        buf.write("\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b5\3\2\2\2\u02b1")
        buf.write("\u02b3\5Z.\2\u02b2\u02b4\7\177\2\2\u02b3\u02b2\3\2\2\2")
        buf.write("\u02b3\u02b4\3\2\2\2\u02b4\u02b6\3\2\2\2\u02b5\u02b1\3")
        buf.write("\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02bb\3\2\2\2\u02b7\u02b9")
        buf.write("\5V,\2\u02b8\u02ba\7\177\2\2\u02b9\u02b8\3\2\2\2\u02b9")
        buf.write("\u02ba\3\2\2\2\u02ba\u02bc\3\2\2\2\u02bb\u02b7\3\2\2\2")
        buf.write("\u02bb\u02bc\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\7")
        buf.write("\t\2\2\u02beO\3\2\2\2\u02bf\u02c1\5R*\2\u02c0\u02c2\7")
        buf.write("\177\2\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write("\u02c3\3\2\2\2\u02c3\u02c4\5N(\2\u02c4Q\3\2\2\2\u02c5")
        buf.write("\u02c7\5\u00c2b\2\u02c6\u02c8\7\177\2\2\u02c7\u02c6\3")
        buf.write("\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02cb")
        buf.write("\5\u00c6d\2\u02ca\u02cc\7\177\2\2\u02cb\u02ca\3\2\2\2")
        buf.write("\u02cb\u02cc\3\2\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cf\5")
        buf.write("T+\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d1")
        buf.write("\3\2\2\2\u02d0\u02d2\7\177\2\2\u02d1\u02d0\3\2\2\2\u02d1")
        buf.write("\u02d2\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02d5\5\u00c6")
        buf.write("d\2\u02d4\u02d6\7\177\2\2\u02d5\u02d4\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\5\u00c4c\2\u02d8")
        buf.write("\u0306\3\2\2\2\u02d9\u02db\5\u00c2b\2\u02da\u02dc\7\177")
        buf.write("\2\2\u02db\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd")
        buf.write("\3\2\2\2\u02dd\u02df\5\u00c6d\2\u02de\u02e0\7\177\2\2")
        buf.write("\u02df\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2\3")
        buf.write("\2\2\2\u02e1\u02e3\5T+\2\u02e2\u02e1\3\2\2\2\u02e2\u02e3")
        buf.write("\3\2\2\2\u02e3\u02e5\3\2\2\2\u02e4\u02e6\7\177\2\2\u02e5")
        buf.write("\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2")
        buf.write("\u02e7\u02e8\5\u00c6d\2\u02e8\u0306\3\2\2\2\u02e9\u02eb")
        buf.write("\5\u00c6d\2\u02ea\u02ec\7\177\2\2\u02eb\u02ea\3\2\2\2")
        buf.write("\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed\u02ef\5")
        buf.write("T+\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f1")
        buf.write("\3\2\2\2\u02f0\u02f2\7\177\2\2\u02f1\u02f0\3\2\2\2\u02f1")
        buf.write("\u02f2\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f5\5\u00c6")
        buf.write("d\2\u02f4\u02f6\7\177\2\2\u02f5\u02f4\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\5\u00c4c\2\u02f8")
        buf.write("\u0306\3\2\2\2\u02f9\u02fb\5\u00c6d\2\u02fa\u02fc\7\177")
        buf.write("\2\2\u02fb\u02fa\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe")
        buf.write("\3\2\2\2\u02fd\u02ff\5T+\2\u02fe\u02fd\3\2\2\2\u02fe\u02ff")
        buf.write("\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u0302\7\177\2\2\u0301")
        buf.write("\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0303\3\2\2\2")
        buf.write("\u0303\u0304\5\u00c6d\2\u0304\u0306\3\2\2\2\u0305\u02c5")
        buf.write("\3\2\2\2\u0305\u02d9\3\2\2\2\u0305\u02e9\3\2\2\2\u0305")
        buf.write("\u02f9\3\2\2\2\u0306S\3\2\2\2\u0307\u0309\7\n\2\2\u0308")
        buf.write("\u030a\7\177\2\2\u0309\u0308\3\2\2\2\u0309\u030a\3\2\2")
        buf.write("\2\u030a\u030f\3\2\2\2\u030b\u030d\5\u00acW\2\u030c\u030e")
        buf.write("\7\177\2\2\u030d\u030c\3\2\2\2\u030d\u030e\3\2\2\2\u030e")
        buf.write("\u0310\3\2\2\2\u030f\u030b\3\2\2\2\u030f\u0310\3\2\2\2")
        buf.write("\u0310\u0315\3\2\2\2\u0311\u0313\5X-\2\u0312\u0314\7\177")
        buf.write("\2\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0316")
        buf.write("\3\2\2\2\u0315\u0311\3\2\2\2\u0315\u0316\3\2\2\2\u0316")
        buf.write("\u0318\3\2\2\2\u0317\u0319\5^\60\2\u0318\u0317\3\2\2\2")
        buf.write("\u0318\u0319\3\2\2\2\u0319\u031e\3\2\2\2\u031a\u031c\5")
        buf.write("V,\2\u031b\u031d\7\177\2\2\u031c\u031b\3\2\2\2\u031c\u031d")
        buf.write("\3\2\2\2\u031d\u031f\3\2\2\2\u031e\u031a\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\7\13\2")
        buf.write("\2\u0321U\3\2\2\2\u0322\u0325\5\u00b0Y\2\u0323\u0325\5")
        buf.write("\u00b2Z\2\u0324\u0322\3\2\2\2\u0324\u0323\3\2\2\2\u0325")
        buf.write("W\3\2\2\2\u0326\u0328\7\f\2\2\u0327\u0329\7\177\2\2\u0328")
        buf.write("\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u0338\5b\62\2\u032b\u032d\7\177\2\2\u032c\u032b")
        buf.write("\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032e\3\2\2\2\u032e")
        buf.write("\u0330\7\r\2\2\u032f\u0331\7\f\2\2\u0330\u032f\3\2\2\2")
        buf.write("\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0334\7")
        buf.write("\177\2\2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0337\5b\62\2\u0336\u032c\3\2\2\2")
        buf.write("\u0337\u033a\3\2\2\2\u0338\u0336\3\2\2\2\u0338\u0339\3")
        buf.write("\2\2\2\u0339Y\3\2\2\2\u033a\u0338\3\2\2\2\u033b\u0342")
        buf.write("\5\\/\2\u033c\u033e\7\177\2\2\u033d\u033c\3\2\2\2\u033d")
        buf.write("\u033e\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0341\5\\/\2")
        buf.write("\u0340\u033d\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3")
        buf.write("\2\2\2\u0342\u0343\3\2\2\2\u0343[\3\2\2\2\u0344\u0342")
        buf.write("\3\2\2\2\u0345\u0347\7\f\2\2\u0346\u0348\7\177\2\2\u0347")
        buf.write("\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2")
        buf.write("\u0349\u034a\5`\61\2\u034a]\3\2\2\2\u034b\u034d\7\7\2")
        buf.write("\2\u034c\u034e\7\177\2\2\u034d\u034c\3\2\2\2\u034d\u034e")
        buf.write("\3\2\2\2\u034e\u0353\3\2\2\2\u034f\u0351\5\u00b8]\2\u0350")
        buf.write("\u0352\7\177\2\2\u0351\u0350\3\2\2\2\u0351\u0352\3\2\2")
        buf.write("\2\u0352\u0354\3\2\2\2\u0353\u034f\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u035f\3\2\2\2\u0355\u0357\7\16\2\2\u0356")
        buf.write("\u0358\7\177\2\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2")
        buf.write("\2\u0358\u035d\3\2\2\2\u0359\u035b\5\u00b8]\2\u035a\u035c")
        buf.write("\7\177\2\2\u035b\u035a\3\2\2\2\u035b\u035c\3\2\2\2\u035c")
        buf.write("\u035e\3\2\2\2\u035d\u0359\3\2\2\2\u035d\u035e\3\2\2\2")
        buf.write("\u035e\u0360\3\2\2\2\u035f\u0355\3\2\2\2\u035f\u0360\3")
        buf.write("\2\2\2\u0360_\3\2\2\2\u0361\u0362\5\u00bc_\2\u0362a\3")
        buf.write("\2\2\2\u0363\u0364\5\u00bc_\2\u0364c\3\2\2\2\u0365\u0366")
        buf.write("\5f\64\2\u0366e\3\2\2\2\u0367\u036e\5h\65\2\u0368\u0369")
        buf.write("\7\177\2\2\u0369\u036a\7K\2\2\u036a\u036b\7\177\2\2\u036b")
        buf.write("\u036d\5h\65\2\u036c\u0368\3\2\2\2\u036d\u0370\3\2\2\2")
        buf.write("\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036fg\3\2\2")
        buf.write("\2\u0370\u036e\3\2\2\2\u0371\u0378\5j\66\2\u0372\u0373")
        buf.write("\7\177\2\2\u0373\u0374\7L\2\2\u0374\u0375\7\177\2\2\u0375")
        buf.write("\u0377\5j\66\2\u0376\u0372\3\2\2\2\u0377\u037a\3\2\2\2")
        buf.write("\u0378\u0376\3\2\2\2\u0378\u0379\3\2\2\2\u0379i\3\2\2")
        buf.write("\2\u037a\u0378\3\2\2\2\u037b\u0382\5l\67\2\u037c\u037d")
        buf.write("\7\177\2\2\u037d\u037e\7M\2\2\u037e\u037f\7\177\2\2\u037f")
        buf.write("\u0381\5l\67\2\u0380\u037c\3\2\2\2\u0381\u0384\3\2\2\2")
        buf.write("\u0382\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383k\3\2\2")
        buf.write("\2\u0384\u0382\3\2\2\2\u0385\u0387\7N\2\2\u0386\u0388")
        buf.write("\7\177\2\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388")
        buf.write("\u038a\3\2\2\2\u0389\u0385\3\2\2\2\u038a\u038d\3\2\2\2")
        buf.write("\u038b\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038e\3")
        buf.write("\2\2\2\u038d\u038b\3\2\2\2\u038e\u038f\5n8\2\u038fm\3")
        buf.write("\2\2\2\u0390\u0397\5p9\2\u0391\u0393\7\177\2\2\u0392\u0391")
        buf.write("\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394\3\2\2\2\u0394")
        buf.write("\u0396\5\u008aF\2\u0395\u0392\3\2\2\2\u0396\u0399\3\2")
        buf.write("\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398o\3")
        buf.write("\2\2\2\u0399\u0397\3\2\2\2\u039a\u03ad\5r:\2\u039b\u039d")
        buf.write("\7\177\2\2\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u03a0\7\17\2\2\u039f\u03a1\7\177")
        buf.write("\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2")
        buf.write("\3\2\2\2\u03a2\u03ac\5r:\2\u03a3\u03a5\7\177\2\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2")
        buf.write("\u03a6\u03a8\7\20\2\2\u03a7\u03a9\7\177\2\2\u03a8\u03a7")
        buf.write("\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03ac\5r:\2\u03ab\u039c\3\2\2\2\u03ab\u03a4\3\2\2\2\u03ac")
        buf.write("\u03af\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2")
        buf.write("\u03aeq\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03cb\5t;\2")
        buf.write("\u03b1\u03b3\7\177\2\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3")
        buf.write("\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b6\7\7\2\2\u03b5")
        buf.write("\u03b7\7\177\2\2\u03b6\u03b5\3\2\2\2\u03b6\u03b7\3\2\2")
        buf.write("\2\u03b7\u03b8\3\2\2\2\u03b8\u03ca\5t;\2\u03b9\u03bb\7")
        buf.write("\177\2\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb")
        buf.write("\u03bc\3\2\2\2\u03bc\u03be\7\21\2\2\u03bd\u03bf\7\177")
        buf.write("\2\2\u03be\u03bd\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c0")
        buf.write("\3\2\2\2\u03c0\u03ca\5t;\2\u03c1\u03c3\7\177\2\2\u03c2")
        buf.write("\u03c1\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4\3\2\2\2")
        buf.write("\u03c4\u03c6\7\22\2\2\u03c5\u03c7\7\177\2\2\u03c6\u03c5")
        buf.write("\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8")
        buf.write("\u03ca\5t;\2\u03c9\u03b2\3\2\2\2\u03c9\u03ba\3\2\2\2\u03c9")
        buf.write("\u03c2\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9\3\2\2\2")
        buf.write("\u03cb\u03cc\3\2\2\2\u03ccs\3\2\2\2\u03cd\u03cb\3\2\2")
        buf.write("\2\u03ce\u03d9\5v<\2\u03cf\u03d1\7\177\2\2\u03d0\u03cf")
        buf.write("\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2")
        buf.write("\u03d4\7\23\2\2\u03d3\u03d5\7\177\2\2\u03d4\u03d3\3\2")
        buf.write("\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8")
        buf.write("\5v<\2\u03d7\u03d0\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03dau\3\2\2\2\u03db\u03d9")
        buf.write("\3\2\2\2\u03dc\u03de\t\3\2\2\u03dd\u03df\7\177\2\2\u03de")
        buf.write("\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3\2\2\2")
        buf.write("\u03e0\u03dc\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0\3")
        buf.write("\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4\u03e2")
        buf.write("\3\2\2\2\u03e5\u03e6\5x=\2\u03e6w\3\2\2\2\u03e7\u03ed")
        buf.write("\5\u0080A\2\u03e8\u03ec\5|?\2\u03e9\u03ec\5z>\2\u03ea")
        buf.write("\u03ec\5~@\2\u03eb\u03e8\3\2\2\2\u03eb\u03e9\3\2\2\2\u03eb")
        buf.write("\u03ea\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03eey\3\2\2\2\u03ef\u03ed\3\2\2")
        buf.write("\2\u03f0\u03f1\7\177\2\2\u03f1\u03f3\7O\2\2\u03f2\u03f4")
        buf.write("\7\177\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5\u040a\5\u0080A\2\u03f6\u03f8\7\177")
        buf.write("\2\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03f9")
        buf.write("\3\2\2\2\u03f9\u03fa\7\n\2\2\u03fa\u03fb\5d\63\2\u03fb")
        buf.write("\u03fc\7\13\2\2\u03fc\u040a\3\2\2\2\u03fd\u03ff\7\177")
        buf.write("\2\2\u03fe\u03fd\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400")
        buf.write("\3\2\2\2\u0400\u0402\7\n\2\2\u0401\u0403\5d\63\2\u0402")
        buf.write("\u0401\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\3\2\2\2")
        buf.write("\u0404\u0406\7\16\2\2\u0405\u0407\5d\63\2\u0406\u0405")
        buf.write("\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408\3\2\2\2\u0408")
        buf.write("\u040a\7\13\2\2\u0409\u03f0\3\2\2\2\u0409\u03f7\3\2\2")
        buf.write("\2\u0409\u03fe\3\2\2\2\u040a{\3\2\2\2\u040b\u040c\7\177")
        buf.write("\2\2\u040c\u040d\7P\2\2\u040d\u040e\7\177\2\2\u040e\u0416")
        buf.write("\7?\2\2\u040f\u0410\7\177\2\2\u0410\u0411\7Q\2\2\u0411")
        buf.write("\u0412\7\177\2\2\u0412\u0416\7?\2\2\u0413\u0414\7\177")
        buf.write("\2\2\u0414\u0416\7R\2\2\u0415\u040b\3\2\2\2\u0415\u040f")
        buf.write("\3\2\2\2\u0415\u0413\3\2\2\2\u0416\u0418\3\2\2\2\u0417")
        buf.write("\u0419\7\177\2\2\u0418\u0417\3\2\2\2\u0418\u0419\3\2\2")
        buf.write("\2\u0419\u041a\3\2\2\2\u041a\u041b\5\u0080A\2\u041b}\3")
        buf.write("\2\2\2\u041c\u041d\7\177\2\2\u041d\u041e\7S\2\2\u041e")
        buf.write("\u041f\7\177\2\2\u041f\u0427\7T\2\2\u0420\u0421\7\177")
        buf.write("\2\2\u0421\u0422\7S\2\2\u0422\u0423\7\177\2\2\u0423\u0424")
        buf.write("\7N\2\2\u0424\u0425\7\177\2\2\u0425\u0427\7T\2\2\u0426")
        buf.write("\u041c\3\2\2\2\u0426\u0420\3\2\2\2\u0427\177\3\2\2\2\u0428")
        buf.write("\u042f\5\u0082B\2\u0429\u042b\7\177\2\2\u042a\u0429\3")
        buf.write("\2\2\2\u042a\u042b\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e")
        buf.write("\5\u00a6T\2\u042d\u042a\3\2\2\2\u042e\u0431\3\2\2\2\u042f")
        buf.write("\u042d\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0436\3\2\2\2")
        buf.write("\u0431\u042f\3\2\2\2\u0432\u0434\7\177\2\2\u0433\u0432")
        buf.write("\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0435\3\2\2\2\u0435")
        buf.write("\u0437\5Z.\2\u0436\u0433\3\2\2\2\u0436\u0437\3\2\2\2\u0437")
        buf.write("\u0081\3\2\2\2\u0438\u0487\5\u0084C\2\u0439\u0487\5\u00b2")
        buf.write("Z\2\u043a\u0487\5\u00a8U\2\u043b\u043d\7U\2\2\u043c\u043e")
        buf.write("\7\177\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e")
        buf.write("\u043f\3\2\2\2\u043f\u0441\7\b\2\2\u0440\u0442\7\177\2")
        buf.write("\2\u0441\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443")
        buf.write("\3\2\2\2\u0443\u0445\7\7\2\2\u0444\u0446\7\177\2\2\u0445")
        buf.write("\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\3\2\2\2")
        buf.write("\u0447\u0487\7\t\2\2\u0448\u0487\5\u00a2R\2\u0449\u0487")
        buf.write("\5\u00a4S\2\u044a\u044c\7\61\2\2\u044b\u044d\7\177\2\2")
        buf.write("\u044c\u044b\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3")
        buf.write("\2\2\2\u044e\u0450\7\b\2\2\u044f\u0451\7\177\2\2\u0450")
        buf.write("\u044f\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0452\3\2\2\2")
        buf.write("\u0452\u0454\5\u0090I\2\u0453\u0455\7\177\2\2\u0454\u0453")
        buf.write("\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("\u0457\7\t\2\2\u0457\u0487\3\2\2\2\u0458\u045a\7V\2\2")
        buf.write("\u0459\u045b\7\177\2\2\u045a\u0459\3\2\2\2\u045a\u045b")
        buf.write("\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\7\b\2\2\u045d")
        buf.write("\u045f\7\177\2\2\u045e\u045d\3\2\2\2\u045e\u045f\3\2\2")
        buf.write("\2\u045f\u0460\3\2\2\2\u0460\u0462\5\u0090I\2\u0461\u0463")
        buf.write("\7\177\2\2\u0462\u0461\3\2\2\2\u0462\u0463\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u0465\7\t\2\2\u0465\u0487\3\2\2\2")
        buf.write("\u0466\u0468\7W\2\2\u0467\u0469\7\177\2\2\u0468\u0467")
        buf.write("\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u046c\7\b\2\2\u046b\u046d\7\177\2\2\u046c\u046b\3\2\2")
        buf.write("\2\u046c\u046d\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u0470")
        buf.write("\5\u0090I\2\u046f\u0471\7\177\2\2\u0470\u046f\3\2\2\2")
        buf.write("\u0470\u0471\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\7")
        buf.write("\t\2\2\u0473\u0487\3\2\2\2\u0474\u0476\7X\2\2\u0475\u0477")
        buf.write("\7\177\2\2\u0476\u0475\3\2\2\2\u0476\u0477\3\2\2\2\u0477")
        buf.write("\u0478\3\2\2\2\u0478\u047a\7\b\2\2\u0479\u047b\7\177\2")
        buf.write("\2\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c")
        buf.write("\3\2\2\2\u047c\u047e\5\u0090I\2\u047d\u047f\7\177\2\2")
        buf.write("\u047e\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\3")
        buf.write("\2\2\2\u0480\u0481\7\t\2\2\u0481\u0487\3\2\2\2\u0482\u0487")
        buf.write("\5\u008eH\2\u0483\u0487\5\u008cG\2\u0484\u0487\5\u0094")
        buf.write("K\2\u0485\u0487\5\u00acW\2\u0486\u0438\3\2\2\2\u0486\u0439")
        buf.write("\3\2\2\2\u0486\u043a\3\2\2\2\u0486\u043b\3\2\2\2\u0486")
        buf.write("\u0448\3\2\2\2\u0486\u0449\3\2\2\2\u0486\u044a\3\2\2\2")
        buf.write("\u0486\u0458\3\2\2\2\u0486\u0466\3\2\2\2\u0486\u0474\3")
        buf.write("\2\2\2\u0486\u0482\3\2\2\2\u0486\u0483\3\2\2\2\u0486\u0484")
        buf.write("\3\2\2\2\u0486\u0485\3\2\2\2\u0487\u0083\3\2\2\2\u0488")
        buf.write("\u048f\5\u00aeX\2\u0489\u048f\7a\2\2\u048a\u048f\5\u0086")
        buf.write("D\2\u048b\u048f\7T\2\2\u048c\u048f\5\u00b0Y\2\u048d\u048f")
        buf.write("\5\u0088E\2\u048e\u0488\3\2\2\2\u048e\u0489\3\2\2\2\u048e")
        buf.write("\u048a\3\2\2\2\u048e\u048b\3\2\2\2\u048e\u048c\3\2\2\2")
        buf.write("\u048e\u048d\3\2\2\2\u048f\u0085\3\2\2\2\u0490\u0491\t")
        buf.write("\4\2\2\u0491\u0087\3\2\2\2\u0492\u0494\7\n\2\2\u0493\u0495")
        buf.write("\7\177\2\2\u0494\u0493\3\2\2\2\u0494\u0495\3\2\2\2\u0495")
        buf.write("\u04a7\3\2\2\2\u0496\u0498\5d\63\2\u0497\u0499\7\177\2")
        buf.write("\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u04a4")
        buf.write("\3\2\2\2\u049a\u049c\7\4\2\2\u049b\u049d\7\177\2\2\u049c")
        buf.write("\u049b\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e\3\2\2\2")
        buf.write("\u049e\u04a0\5d\63\2\u049f\u04a1\7\177\2\2\u04a0\u049f")
        buf.write("\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a3\3\2\2\2\u04a2")
        buf.write("\u049a\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2\3\2\2\2")
        buf.write("\u04a4\u04a5\3\2\2\2\u04a5\u04a8\3\2\2\2\u04a6\u04a4\3")
        buf.write("\2\2\2\u04a7\u0496\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9")
        buf.write("\3\2\2\2\u04a9\u04aa\7\13\2\2\u04aa\u0089\3\2\2\2\u04ab")
        buf.write("\u04ad\7\5\2\2\u04ac\u04ae\7\177\2\2\u04ad\u04ac\3\2\2")
        buf.write("\2\u04ad\u04ae\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04ca")
        buf.write("\5p9\2\u04b0\u04b2\7\24\2\2\u04b1\u04b3\7\177\2\2\u04b2")
        buf.write("\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04b4\3\2\2\2")
        buf.write("\u04b4\u04ca\5p9\2\u04b5\u04b7\7\25\2\2\u04b6\u04b8\7")
        buf.write("\177\2\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8")
        buf.write("\u04b9\3\2\2\2\u04b9\u04ca\5p9\2\u04ba\u04bc\7\26\2\2")
        buf.write("\u04bb\u04bd\7\177\2\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd")
        buf.write("\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04ca\5p9\2\u04bf\u04c1")
        buf.write("\7\27\2\2\u04c0\u04c2\7\177\2\2\u04c1\u04c0\3\2\2\2\u04c1")
        buf.write("\u04c2\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3\u04ca\5p9\2\u04c4")
        buf.write("\u04c6\7\30\2\2\u04c5\u04c7\7\177\2\2\u04c6\u04c5\3\2")
        buf.write("\2\2\u04c6\u04c7\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04ca")
        buf.write("\5p9\2\u04c9\u04ab\3\2\2\2\u04c9\u04b0\3\2\2\2\u04c9\u04b5")
        buf.write("\3\2\2\2\u04c9\u04ba\3\2\2\2\u04c9\u04bf\3\2\2\2\u04c9")
        buf.write("\u04c4\3\2\2\2\u04ca\u008b\3\2\2\2\u04cb\u04cd\7\b\2\2")
        buf.write("\u04cc\u04ce\7\177\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce")
        buf.write("\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d1\5d\63\2\u04d0")
        buf.write("\u04d2\7\177\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2")
        buf.write("\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\7\t\2\2\u04d4\u008d")
        buf.write("\3\2\2\2\u04d5\u04da\5N(\2\u04d6\u04d8\7\177\2\2\u04d7")
        buf.write("\u04d6\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04d9\3\2\2\2")
        buf.write("\u04d9\u04db\5P)\2\u04da\u04d7\3\2\2\2\u04db\u04dc\3\2")
        buf.write("\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u008f")
        buf.write("\3\2\2\2\u04de\u04e3\5\u0092J\2\u04df\u04e1\7\177\2\2")
        buf.write("\u04e0\u04df\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3")
        buf.write("\2\2\2\u04e2\u04e4\5D#\2\u04e3\u04e0\3\2\2\2\u04e3\u04e4")
        buf.write("\3\2\2\2\u04e4\u0091\3\2\2\2\u04e5\u04e6\5\u00acW\2\u04e6")
        buf.write("\u04e7\7\177\2\2\u04e7\u04e8\7O\2\2\u04e8\u04e9\7\177")
        buf.write("\2\2\u04e9\u04ea\5d\63\2\u04ea\u0093\3\2\2\2\u04eb\u04ed")
        buf.write("\5\u0096L\2\u04ec\u04ee\7\177\2\2\u04ed\u04ec\3\2\2\2")
        buf.write("\u04ed\u04ee\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f1\7")
        buf.write("\b\2\2\u04f0\u04f2\7\177\2\2\u04f1\u04f0\3\2\2\2\u04f1")
        buf.write("\u04f2\3\2\2\2\u04f2\u04f7\3\2\2\2\u04f3\u04f5\7A\2\2")
        buf.write("\u04f4\u04f6\7\177\2\2\u04f5\u04f4\3\2\2\2\u04f5\u04f6")
        buf.write("\3\2\2\2\u04f6\u04f8\3\2\2\2\u04f7\u04f3\3\2\2\2\u04f7")
        buf.write("\u04f8\3\2\2\2\u04f8\u050a\3\2\2\2\u04f9\u04fb\5d\63\2")
        buf.write("\u04fa\u04fc\7\177\2\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc")
        buf.write("\3\2\2\2\u04fc\u0507\3\2\2\2\u04fd\u04ff\7\4\2\2\u04fe")
        buf.write("\u0500\7\177\2\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2\2")
        buf.write("\2\u0500\u0501\3\2\2\2\u0501\u0503\5d\63\2\u0502\u0504")
        buf.write("\7\177\2\2\u0503\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504")
        buf.write("\u0506\3\2\2\2\u0505\u04fd\3\2\2\2\u0506\u0509\3\2\2\2")
        buf.write("\u0507\u0505\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050b\3")
        buf.write("\2\2\2\u0509\u0507\3\2\2\2\u050a\u04f9\3\2\2\2\u050a\u050b")
        buf.write("\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d\7\t\2\2\u050d")
        buf.write("\u0095\3\2\2\2\u050e\u050f\5\u00a0Q\2\u050f\u0510\5\u00c0")
        buf.write("a\2\u0510\u0513\3\2\2\2\u0511\u0513\7[\2\2\u0512\u050e")
        buf.write("\3\2\2\2\u0512\u0511\3\2\2\2\u0513\u0097\3\2\2\2\u0514")
        buf.write("\u0516\5\u009eP\2\u0515\u0517\7\177\2\2\u0516\u0515\3")
        buf.write("\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u051a")
        buf.write("\7\b\2\2\u0519\u051b\7\177\2\2\u051a\u0519\3\2\2\2\u051a")
        buf.write("\u051b\3\2\2\2\u051b\u052d\3\2\2\2\u051c\u051e\5d\63\2")
        buf.write("\u051d\u051f\7\177\2\2\u051e\u051d\3\2\2\2\u051e\u051f")
        buf.write("\3\2\2\2\u051f\u052a\3\2\2\2\u0520\u0522\7\4\2\2\u0521")
        buf.write("\u0523\7\177\2\2\u0522\u0521\3\2\2\2\u0522\u0523\3\2\2")
        buf.write("\2\u0523\u0524\3\2\2\2\u0524\u0526\5d\63\2\u0525\u0527")
        buf.write("\7\177\2\2\u0526\u0525\3\2\2\2\u0526\u0527\3\2\2\2\u0527")
        buf.write("\u0529\3\2\2\2\u0528\u0520\3\2\2\2\u0529\u052c\3\2\2\2")
        buf.write("\u052a\u0528\3\2\2\2\u052a\u052b\3\2\2\2\u052b\u052e\3")
        buf.write("\2\2\2\u052c\u052a\3\2\2\2\u052d\u051c\3\2\2\2\u052d\u052e")
        buf.write("\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0530\7\t\2\2\u0530")
        buf.write("\u0099\3\2\2\2\u0531\u0532\5\u009eP\2\u0532\u009b\3\2")
        buf.write("\2\2\u0533\u0534\5\u00c0a\2\u0534\u009d\3\2\2\2\u0535")
        buf.write("\u0536\5\u00a0Q\2\u0536\u0537\5\u00c0a\2\u0537\u009f\3")
        buf.write("\2\2\2\u0538\u0539\5\u00c0a\2\u0539\u053a\7\31\2\2\u053a")
        buf.write("\u053c\3\2\2\2\u053b\u0538\3\2\2\2\u053c\u053f\3\2\2\2")
        buf.write("\u053d\u053b\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u00a1\3")
        buf.write("\2\2\2\u053f\u053d\3\2\2\2\u0540\u0542\7\n\2\2\u0541\u0543")
        buf.write("\7\177\2\2\u0542\u0541\3\2\2\2\u0542\u0543\3\2\2\2\u0543")
        buf.write("\u0544\3\2\2\2\u0544\u054d\5\u0090I\2\u0545\u0547\7\177")
        buf.write("\2\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548")
        buf.write("\3\2\2\2\u0548\u054a\7\r\2\2\u0549\u054b\7\177\2\2\u054a")
        buf.write("\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2")
        buf.write("\u054c\u054e\5d\63\2\u054d\u0546\3\2\2\2\u054d\u054e\3")
        buf.write("\2\2\2\u054e\u0550\3\2\2\2\u054f\u0551\7\177\2\2\u0550")
        buf.write("\u054f\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0552\3\2\2\2")
        buf.write("\u0552\u0553\7\13\2\2\u0553\u00a3\3\2\2\2\u0554\u0556")
        buf.write("\7\n\2\2\u0555\u0557\7\177\2\2\u0556\u0555\3\2\2\2\u0556")
        buf.write("\u0557\3\2\2\2\u0557\u0560\3\2\2\2\u0558\u055a\5\u00ac")
        buf.write("W\2\u0559\u055b\7\177\2\2\u055a\u0559\3\2\2\2\u055a\u055b")
        buf.write("\3\2\2\2\u055b\u055c\3\2\2\2\u055c\u055e\7\5\2\2\u055d")
        buf.write("\u055f\7\177\2\2\u055e\u055d\3\2\2\2\u055e\u055f\3\2\2")
        buf.write("\2\u055f\u0561\3\2\2\2\u0560\u0558\3\2\2\2\u0560\u0561")
        buf.write("\3\2\2\2\u0561\u0562\3\2\2\2\u0562\u0564\5\u008eH\2\u0563")
        buf.write("\u0565\7\177\2\2\u0564\u0563\3\2\2\2\u0564\u0565\3\2\2")
        buf.write("\2\u0565\u056e\3\2\2\2\u0566\u0568\7J\2\2\u0567\u0569")
        buf.write("\7\177\2\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("\u056a\3\2\2\2\u056a\u056c\5d\63\2\u056b\u056d\7\177\2")
        buf.write("\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u056f")
        buf.write("\3\2\2\2\u056e\u0566\3\2\2\2\u056e\u056f\3\2\2\2\u056f")
        buf.write("\u0570\3\2\2\2\u0570\u0572\7\r\2\2\u0571\u0573\7\177\2")
        buf.write("\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0574")
        buf.write("\3\2\2\2\u0574\u0576\5d\63\2\u0575\u0577\7\177\2\2\u0576")
        buf.write("\u0575\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\3\2\2\2")
        buf.write("\u0578\u0579\7\13\2\2\u0579\u00a5\3\2\2\2\u057a\u057c")
        buf.write("\7\31\2\2\u057b\u057d\7\177\2\2\u057c\u057b\3\2\2\2\u057c")
        buf.write("\u057d\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\5\u00b6")
        buf.write("\\\2\u057f\u00a7\3\2\2\2\u0580\u0585\7\\\2\2\u0581\u0583")
        buf.write("\7\177\2\2\u0582\u0581\3\2\2\2\u0582\u0583\3\2\2\2\u0583")
        buf.write("\u0584\3\2\2\2\u0584\u0586\5\u00aaV\2\u0585\u0582\3\2")
        buf.write("\2\2\u0586\u0587\3\2\2\2\u0587\u0585\3\2\2\2\u0587\u0588")
        buf.write("\3\2\2\2\u0588\u0597\3\2\2\2\u0589\u058b\7\\\2\2\u058a")
        buf.write("\u058c\7\177\2\2\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2")
        buf.write("\2\u058c\u058d\3\2\2\2\u058d\u0592\5d\63\2\u058e\u0590")
        buf.write("\7\177\2\2\u058f\u058e\3\2\2\2\u058f\u0590\3\2\2\2\u0590")
        buf.write("\u0591\3\2\2\2\u0591\u0593\5\u00aaV\2\u0592\u058f\3\2")
        buf.write("\2\2\u0593\u0594\3\2\2\2\u0594\u0592\3\2\2\2\u0594\u0595")
        buf.write("\3\2\2\2\u0595\u0597\3\2\2\2\u0596\u0580\3\2\2\2\u0596")
        buf.write("\u0589\3\2\2\2\u0597\u05a0\3\2\2\2\u0598\u059a\7\177\2")
        buf.write("\2\u0599\u0598\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b")
        buf.write("\3\2\2\2\u059b\u059d\7]\2\2\u059c\u059e\7\177\2\2\u059d")
        buf.write("\u059c\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2")
        buf.write("\u059f\u05a1\5d\63\2\u05a0\u0599\3\2\2\2\u05a0\u05a1\3")
        buf.write("\2\2\2\u05a1\u05a3\3\2\2\2\u05a2\u05a4\7\177\2\2\u05a3")
        buf.write("\u05a2\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a5\3\2\2\2")
        buf.write("\u05a5\u05a6\7^\2\2\u05a6\u00a9\3\2\2\2\u05a7\u05a9\7")
        buf.write("_\2\2\u05a8\u05aa\7\177\2\2\u05a9\u05a8\3\2\2\2\u05a9")
        buf.write("\u05aa\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab\u05ad\5d\63\2")
        buf.write("\u05ac\u05ae\7\177\2\2\u05ad\u05ac\3\2\2\2\u05ad\u05ae")
        buf.write("\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b1\7`\2\2\u05b0")
        buf.write("\u05b2\7\177\2\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2")
        buf.write("\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\5d\63\2\u05b4\u00ab")
        buf.write("\3\2\2\2\u05b5\u05b6\5\u00c0a\2\u05b6\u00ad\3\2\2\2\u05b7")
        buf.write("\u05ba\5\u00ba^\2\u05b8\u05ba\5\u00b8]\2\u05b9\u05b7\3")
        buf.write("\2\2\2\u05b9\u05b8\3\2\2\2\u05ba\u00af\3\2\2\2\u05bb\u05bd")
        buf.write("\7\32\2\2\u05bc\u05be\7\177\2\2\u05bd\u05bc\3\2\2\2\u05bd")
        buf.write("\u05be\3\2\2\2\u05be\u05e0\3\2\2\2\u05bf\u05c1\5\u00b6")
        buf.write("\\\2\u05c0\u05c2\7\177\2\2\u05c1\u05c0\3\2\2\2\u05c1\u05c2")
        buf.write("\3\2\2\2\u05c2\u05c3\3\2\2\2\u05c3\u05c5\7\f\2\2\u05c4")
        buf.write("\u05c6\7\177\2\2\u05c5\u05c4\3\2\2\2\u05c5\u05c6\3\2\2")
        buf.write("\2\u05c6\u05c7\3\2\2\2\u05c7\u05c9\5d\63\2\u05c8\u05ca")
        buf.write("\7\177\2\2\u05c9\u05c8\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca")
        buf.write("\u05dd\3\2\2\2\u05cb\u05cd\7\4\2\2\u05cc\u05ce\7\177\2")
        buf.write("\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05cf")
        buf.write("\3\2\2\2\u05cf\u05d1\5\u00b6\\\2\u05d0\u05d2\7\177\2\2")
        buf.write("\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d3\3")
        buf.write("\2\2\2\u05d3\u05d5\7\f\2\2\u05d4\u05d6\7\177\2\2\u05d5")
        buf.write("\u05d4\3\2\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7\u05d9\5d\63\2\u05d8\u05da\7\177\2\2\u05d9\u05d8")
        buf.write("\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\3\2\2\2\u05db")
        buf.write("\u05cb\3\2\2\2\u05dc\u05df\3\2\2\2\u05dd\u05db\3\2\2\2")
        buf.write("\u05dd\u05de\3\2\2\2\u05de\u05e1\3\2\2\2\u05df\u05dd\3")
        buf.write("\2\2\2\u05e0\u05bf\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2")
        buf.write("\3\2\2\2\u05e2\u05e3\7\33\2\2\u05e3\u00b1\3\2\2\2\u05e4")
        buf.write("\u05e7\7\34\2\2\u05e5\u05e8\5\u00c0a\2\u05e6\u05e8\7d")
        buf.write("\2\2\u05e7\u05e5\3\2\2\2\u05e7\u05e6\3\2\2\2\u05e8\u00b3")
        buf.write("\3\2\2\2\u05e9\u05ee\5\u0082B\2\u05ea\u05ec\7\177\2\2")
        buf.write("\u05eb\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ed\3")
        buf.write("\2\2\2\u05ed\u05ef\5\u00a6T\2\u05ee\u05eb\3\2\2\2\u05ef")
        buf.write("\u05f0\3\2\2\2\u05f0\u05ee\3\2\2\2\u05f0\u05f1\3\2\2\2")
        buf.write("\u05f1\u00b5\3\2\2\2\u05f2\u05f3\5\u00bc_\2\u05f3\u00b7")
        buf.write("\3\2\2\2\u05f4\u05f5\t\5\2\2\u05f5\u00b9\3\2\2\2\u05f6")
        buf.write("\u05f7\t\6\2\2\u05f7\u00bb\3\2\2\2\u05f8\u05fb\5\u00c0")
        buf.write("a\2\u05f9\u05fb\5\u00be`\2\u05fa\u05f8\3\2\2\2\u05fa\u05f9")
        buf.write("\3\2\2\2\u05fb\u00bd\3\2\2\2\u05fc\u05fd\t\7\2\2\u05fd")
        buf.write("\u00bf\3\2\2\2\u05fe\u05ff\t\b\2\2\u05ff\u00c1\3\2\2\2")
        buf.write("\u0600\u0601\t\t\2\2\u0601\u00c3\3\2\2\2\u0602\u0603\t")
        buf.write("\n\2\2\u0603\u00c5\3\2\2\2\u0604\u0605\t\13\2\2\u0605")
        buf.write("\u00c7\3\2\2\2\u011d\u00c9\u00cd\u00d0\u00d3\u00db\u00df")
        buf.write("\u00e4\u00eb\u00f0\u00f3\u00f7\u00fb\u00ff\u0105\u0109")
        buf.write("\u010e\u0113\u0117\u011a\u011c\u0120\u0124\u0129\u012d")
        buf.write("\u0132\u0136\u013f\u0144\u0148\u014c\u0150\u0153\u0157")
        buf.write("\u0161\u0168\u0175\u0179\u017f\u0186\u018b\u018f\u0195")
        buf.write("\u0199\u019f\u01a3\u01a9\u01ad\u01b1\u01b5\u01b9\u01bd")
        buf.write("\u01c2\u01c9\u01cd\u01d2\u01d9\u01df\u01e4\u01ea\u01f0")
        buf.write("\u01f5\u01f9\u01fe\u0201\u0204\u0207\u020e\u0215\u0218")
        buf.write("\u021e\u0221\u0227\u022b\u022f\u0233\u0237\u023c\u0241")
        buf.write("\u0245\u024a\u024d\u0256\u025f\u0264\u0271\u0274\u027c")
        buf.write("\u0280\u0285\u028a\u028e\u0293\u0299\u029e\u02a5\u02a9")
        buf.write("\u02ad\u02af\u02b3\u02b5\u02b9\u02bb\u02c1\u02c7\u02cb")
        buf.write("\u02ce\u02d1\u02d5\u02db\u02df\u02e2\u02e5\u02eb\u02ee")
        buf.write("\u02f1\u02f5\u02fb\u02fe\u0301\u0305\u0309\u030d\u030f")
        buf.write("\u0313\u0315\u0318\u031c\u031e\u0324\u0328\u032c\u0330")
        buf.write("\u0333\u0338\u033d\u0342\u0347\u034d\u0351\u0353\u0357")
        buf.write("\u035b\u035d\u035f\u036e\u0378\u0382\u0387\u038b\u0392")
        buf.write("\u0397\u039c\u03a0\u03a4\u03a8\u03ab\u03ad\u03b2\u03b6")
        buf.write("\u03ba\u03be\u03c2\u03c6\u03c9\u03cb\u03d0\u03d4\u03d9")
        buf.write("\u03de\u03e2\u03eb\u03ed\u03f3\u03f7\u03fe\u0402\u0406")
        buf.write("\u0409\u0415\u0418\u0426\u042a\u042f\u0433\u0436\u043d")
        buf.write("\u0441\u0445\u044c\u0450\u0454\u045a\u045e\u0462\u0468")
        buf.write("\u046c\u0470\u0476\u047a\u047e\u0486\u048e\u0494\u0498")
        buf.write("\u049c\u04a0\u04a4\u04a7\u04ad\u04b2\u04b7\u04bc\u04c1")
        buf.write("\u04c6\u04c9\u04cd\u04d1\u04d7\u04dc\u04e0\u04e3\u04ed")
        buf.write("\u04f1\u04f5\u04f7\u04fb\u04ff\u0503\u0507\u050a\u0512")
        buf.write("\u0516\u051a\u051e\u0522\u0526\u052a\u052d\u053d\u0542")
        buf.write("\u0546\u054a\u054d\u0550\u0556\u055a\u055e\u0560\u0564")
        buf.write("\u0568\u056c\u056e\u0572\u0576\u057c\u0582\u0587\u058b")
        buf.write("\u058f\u0594\u0596\u0599\u059d\u05a0\u05a3\u05a9\u05ad")
        buf.write("\u05b1\u05b9\u05bd\u05c1\u05c5\u05c9\u05cd\u05d1\u05d5")
        buf.write("\u05d9\u05dd\u05e0\u05e7\u05eb\u05f0\u05fa")
        return buf.getvalue()


class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'+='", "'*'", "'('", 
                     "')'", "'['", "']'", "':'", "'|'", "'..'", "'+'", "'-'", 
                     "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'", "'<='", 
                     "'>='", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", 
                     "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", 
                     "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", 
                     "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", 
                     "'\uFE63'", "'\uFF0D'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS", 
                      "ENDS", "CONTAINS", "IS", "NULL", "COUNT", "ANY", 
                      "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", 
                      "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", 
                      "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", 
                      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
                      "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_Statement = 1
    RULE_oC_Query = 2
    RULE_oC_RegularQuery = 3
    RULE_oC_Union = 4
    RULE_oC_SingleQuery = 5
    RULE_oC_SinglePartQuery = 6
    RULE_oC_MultiPartQuery = 7
    RULE_oC_UpdatingClause = 8
    RULE_oC_ReadingClause = 9
    RULE_oC_Match = 10
    RULE_oC_Unwind = 11
    RULE_oC_Merge = 12
    RULE_oC_MergeAction = 13
    RULE_oC_Create = 14
    RULE_oC_Set = 15
    RULE_oC_SetItem = 16
    RULE_oC_Delete = 17
    RULE_oC_Remove = 18
    RULE_oC_RemoveItem = 19
    RULE_oC_InQueryCall = 20
    RULE_oC_StandaloneCall = 21
    RULE_oC_YieldItems = 22
    RULE_oC_YieldItem = 23
    RULE_oC_With = 24
    RULE_oC_Return = 25
    RULE_oC_ProjectionBody = 26
    RULE_oC_ProjectionItems = 27
    RULE_oC_ProjectionItem = 28
    RULE_oC_Order = 29
    RULE_oC_Skip = 30
    RULE_oC_Limit = 31
    RULE_oC_SortItem = 32
    RULE_oC_Where = 33
    RULE_oC_Pattern = 34
    RULE_oC_PatternPart = 35
    RULE_oC_AnonymousPatternPart = 36
    RULE_oC_PatternElement = 37
    RULE_oC_NodePattern = 38
    RULE_oC_PatternElementChain = 39
    RULE_oC_RelationshipPattern = 40
    RULE_oC_RelationshipDetail = 41
    RULE_oC_Properties = 42
    RULE_oC_RelationshipTypes = 43
    RULE_oC_NodeLabels = 44
    RULE_oC_NodeLabel = 45
    RULE_oC_RangeLiteral = 46
    RULE_oC_LabelName = 47
    RULE_oC_RelTypeName = 48
    RULE_oC_Expression = 49
    RULE_oC_OrExpression = 50
    RULE_oC_XorExpression = 51
    RULE_oC_AndExpression = 52
    RULE_oC_NotExpression = 53
    RULE_oC_ComparisonExpression = 54
    RULE_oC_AddOrSubtractExpression = 55
    RULE_oC_MultiplyDivideModuloExpression = 56
    RULE_oC_PowerOfExpression = 57
    RULE_oC_UnaryAddOrSubtractExpression = 58
    RULE_oC_StringListNullOperatorExpression = 59
    RULE_oC_ListOperatorExpression = 60
    RULE_oC_StringOperatorExpression = 61
    RULE_oC_NullOperatorExpression = 62
    RULE_oC_PropertyOrLabelsExpression = 63
    RULE_oC_Atom = 64
    RULE_oC_Literal = 65
    RULE_oC_BooleanLiteral = 66
    RULE_oC_ListLiteral = 67
    RULE_oC_PartialComparisonExpression = 68
    RULE_oC_ParenthesizedExpression = 69
    RULE_oC_RelationshipsPattern = 70
    RULE_oC_FilterExpression = 71
    RULE_oC_IdInColl = 72
    RULE_oC_FunctionInvocation = 73
    RULE_oC_FunctionName = 74
    RULE_oC_ExplicitProcedureInvocation = 75
    RULE_oC_ImplicitProcedureInvocation = 76
    RULE_oC_ProcedureResultField = 77
    RULE_oC_ProcedureName = 78
    RULE_oC_Namespace = 79
    RULE_oC_ListComprehension = 80
    RULE_oC_PatternComprehension = 81
    RULE_oC_PropertyLookup = 82
    RULE_oC_CaseExpression = 83
    RULE_oC_CaseAlternatives = 84
    RULE_oC_Variable = 85
    RULE_oC_NumberLiteral = 86
    RULE_oC_MapLiteral = 87
    RULE_oC_Parameter = 88
    RULE_oC_PropertyExpression = 89
    RULE_oC_PropertyKeyName = 90
    RULE_oC_IntegerLiteral = 91
    RULE_oC_DoubleLiteral = 92
    RULE_oC_SchemaName = 93
    RULE_oC_ReservedWord = 94
    RULE_oC_SymbolicName = 95
    RULE_oC_LeftArrowHead = 96
    RULE_oC_RightArrowHead = 97
    RULE_oC_Dash = 98

    ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
                   "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", 
                   "oC_ListOperatorExpression", "oC_StringOperatorExpression", 
                   "oC_NullOperatorExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
                   "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
                   "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", 
                   "oC_FunctionInvocation", "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", 
                   "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", 
                   "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression", 
                   "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", 
                   "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    UNION=46
    ALL=47
    OPTIONAL=48
    MATCH=49
    UNWIND=50
    AS=51
    MERGE=52
    ON=53
    CREATE=54
    SET=55
    DETACH=56
    DELETE=57
    REMOVE=58
    CALL=59
    YIELD=60
    WITH=61
    RETURN=62
    DISTINCT=63
    ORDER=64
    BY=65
    L_SKIP=66
    LIMIT=67
    ASCENDING=68
    ASC=69
    DESCENDING=70
    DESC=71
    WHERE=72
    OR=73
    XOR=74
    AND=75
    NOT=76
    IN=77
    STARTS=78
    ENDS=79
    CONTAINS=80
    IS=81
    NULL=82
    COUNT=83
    ANY=84
    NONE=85
    SINGLE=86
    TRUE=87
    FALSE=88
    EXISTS=89
    CASE=90
    ELSE=91
    END=92
    WHEN=93
    THEN=94
    StringLiteral=95
    EscapedChar=96
    HexInteger=97
    DecimalInteger=98
    OctalInteger=99
    HexLetter=100
    HexDigit=101
    Digit=102
    NonZeroDigit=103
    NonZeroOctDigit=104
    OctDigit=105
    ZeroDigit=106
    ExponentDecimalReal=107
    RegularDecimalReal=108
    CONSTRAINT=109
    DO=110
    FOR=111
    REQUIRE=112
    UNIQUE=113
    MANDATORY=114
    SCALAR=115
    OF=116
    ADD=117
    DROP=118
    FILTER=119
    EXTRACT=120
    UnescapedSymbolicName=121
    IdentifierStart=122
    IdentifierPart=123
    EscapedSymbolicName=124
    SP=125
    WHITESPACE=126
    Comment=127

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Cypher" ):
                return visitor.visitOC_Cypher(self)
            else:
                return visitor.visitChildren(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 198
                self.match(CypherParser.SP)


            self.state = 201
            self.oC_Statement()
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 202
                    self.match(CypherParser.SP)


                self.state = 205
                self.match(CypherParser.T__0)


            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 208
                self.match(CypherParser.SP)


            self.state = 211
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Statement" ):
                return visitor.visitOC_Statement(self)
            else:
                return visitor.visitChildren(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Query" ):
                return visitor.visitOC_Query(self)
            else:
                return visitor.visitChildren(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Query)
        try:
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 215
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 216
                self.oC_StandaloneCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RegularQuery" ):
                return visitor.visitOC_RegularQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.oC_SingleQuery()
            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 220
                        self.match(CypherParser.SP)


                    self.state = 223
                    self.oC_Union() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Union" ):
                return visitor.visitOC_Union(self)
            else:
                return visitor.visitChildren(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.match(CypherParser.UNION)
                self.state = 230
                self.match(CypherParser.SP)
                self.state = 231
                self.match(CypherParser.ALL)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 232
                    self.match(CypherParser.SP)


                self.state = 235
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.match(CypherParser.UNION)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 237
                    self.match(CypherParser.SP)


                self.state = 240
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SingleQuery" ):
                return visitor.visitOC_SingleQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_SingleQuery)
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SinglePartQuery" ):
                return visitor.visitOC_SinglePartQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                    self.state = 247
                    self.oC_ReadingClause()
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 248
                        self.match(CypherParser.SP)


                    self.state = 255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 256
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                    self.state = 257
                    self.oC_ReadingClause()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 258
                        self.match(CypherParser.SP)


                    self.state = 265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 266
                self.oC_UpdatingClause()
                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 268
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 267
                            self.match(CypherParser.SP)


                        self.state = 270
                        self.oC_UpdatingClause() 
                    self.state = 275
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 276
                        self.match(CypherParser.SP)


                    self.state = 279
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MultiPartQuery" ):
                return visitor.visitOC_MultiPartQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.CALL))) != 0):
                        self.state = 284
                        self.oC_ReadingClause()
                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 285
                            self.match(CypherParser.SP)


                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.MERGE) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE))) != 0):
                        self.state = 293
                        self.oC_UpdatingClause()
                        self.state = 295
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 294
                            self.match(CypherParser.SP)


                        self.state = 301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 302
                    self.oC_With()
                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 303
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 310
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_UpdatingClause" ):
                return visitor.visitOC_UpdatingClause(self)
            else:
                return visitor.visitChildren(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_UpdatingClause)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.CREATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.oC_Create()
                pass
            elif token in [CypherParser.MERGE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.oC_Merge()
                pass
            elif token in [CypherParser.DETACH, CypherParser.DELETE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.oC_Delete()
                pass
            elif token in [CypherParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.oC_Set()
                pass
            elif token in [CypherParser.REMOVE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 316
                self.oC_Remove()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ReadingClause" ):
                return visitor.visitOC_ReadingClause(self)
            else:
                return visitor.visitChildren(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_ReadingClause)
        try:
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.OPTIONAL, CypherParser.MATCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.oC_Match()
                pass
            elif token in [CypherParser.UNWIND]:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.oC_Unwind()
                pass
            elif token in [CypherParser.CALL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Match" ):
                return visitor.visitOC_Match(self)
            else:
                return visitor.visitChildren(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.OPTIONAL:
                self.state = 324
                self.match(CypherParser.OPTIONAL)
                self.state = 325
                self.match(CypherParser.SP)


            self.state = 328
            self.match(CypherParser.MATCH)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 329
                self.match(CypherParser.SP)


            self.state = 332
            self.oC_Pattern()
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 333
                    self.match(CypherParser.SP)


                self.state = 336
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Unwind" ):
                return visitor.visitOC_Unwind(self)
            else:
                return visitor.visitChildren(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(CypherParser.UNWIND)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 340
                self.match(CypherParser.SP)


            self.state = 343
            self.oC_Expression()
            self.state = 344
            self.match(CypherParser.SP)
            self.state = 345
            self.match(CypherParser.AS)
            self.state = 346
            self.match(CypherParser.SP)
            self.state = 347
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Merge" ):
                return visitor.visitOC_Merge(self)
            else:
                return visitor.visitChildren(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(CypherParser.MERGE)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 350
                self.match(CypherParser.SP)


            self.state = 353
            self.oC_PatternPart()
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.match(CypherParser.SP)
                    self.state = 355
                    self.oC_MergeAction() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MergeAction" ):
                return visitor.visitOC_MergeAction(self)
            else:
                return visitor.visitChildren(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_MergeAction)
        try:
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                self.match(CypherParser.ON)
                self.state = 362
                self.match(CypherParser.SP)
                self.state = 363
                self.match(CypherParser.MATCH)
                self.state = 364
                self.match(CypherParser.SP)
                self.state = 365
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                self.match(CypherParser.ON)
                self.state = 367
                self.match(CypherParser.SP)
                self.state = 368
                self.match(CypherParser.CREATE)
                self.state = 369
                self.match(CypherParser.SP)
                self.state = 370
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Create" ):
                return visitor.visitOC_Create(self)
            else:
                return visitor.visitChildren(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(CypherParser.CREATE)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 374
                self.match(CypherParser.SP)


            self.state = 377
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Set" ):
                return visitor.visitOC_Set(self)
            else:
                return visitor.visitChildren(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(CypherParser.SET)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 380
                self.match(CypherParser.SP)


            self.state = 383
            self.oC_SetItem()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__1:
                self.state = 384
                self.match(CypherParser.T__1)
                self.state = 385
                self.oC_SetItem()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SetItem" ):
                return visitor.visitOC_SetItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.oC_PropertyExpression()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 392
                    self.match(CypherParser.SP)


                self.state = 395
                self.match(CypherParser.T__2)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 396
                    self.match(CypherParser.SP)


                self.state = 399
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                self.oC_Variable()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 402
                    self.match(CypherParser.SP)


                self.state = 405
                self.match(CypherParser.T__2)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 406
                    self.match(CypherParser.SP)


                self.state = 409
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.oC_Variable()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 412
                    self.match(CypherParser.SP)


                self.state = 415
                self.match(CypherParser.T__3)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 416
                    self.match(CypherParser.SP)


                self.state = 419
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 421
                self.oC_Variable()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 422
                    self.match(CypherParser.SP)


                self.state = 425
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Delete" ):
                return visitor.visitOC_Delete(self)
            else:
                return visitor.visitChildren(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DETACH:
                self.state = 429
                self.match(CypherParser.DETACH)
                self.state = 430
                self.match(CypherParser.SP)


            self.state = 433
            self.match(CypherParser.DELETE)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 434
                self.match(CypherParser.SP)


            self.state = 437
            self.oC_Expression()
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 438
                        self.match(CypherParser.SP)


                    self.state = 441
                    self.match(CypherParser.T__1)
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 442
                        self.match(CypherParser.SP)


                    self.state = 445
                    self.oC_Expression() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Remove" ):
                return visitor.visitOC_Remove(self)
            else:
                return visitor.visitChildren(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(CypherParser.REMOVE)
            self.state = 452
            self.match(CypherParser.SP)
            self.state = 453
            self.oC_RemoveItem()
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 454
                        self.match(CypherParser.SP)


                    self.state = 457
                    self.match(CypherParser.T__1)
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 458
                        self.match(CypherParser.SP)


                    self.state = 461
                    self.oC_RemoveItem() 
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RemoveItem" ):
                return visitor.visitOC_RemoveItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RemoveItem)
        try:
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 467
                self.oC_Variable()
                self.state = 468
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_InQueryCall" ):
                return visitor.visitOC_InQueryCall(self)
            else:
                return visitor.visitChildren(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(CypherParser.CALL)
            self.state = 474
            self.match(CypherParser.SP)
            self.state = 475
            self.oC_ExplicitProcedureInvocation()
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 476
                    self.match(CypherParser.SP)


                self.state = 479
                self.match(CypherParser.YIELD)
                self.state = 480
                self.match(CypherParser.SP)
                self.state = 481
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StandaloneCall" ):
                return visitor.visitOC_StandaloneCall(self)
            else:
                return visitor.visitChildren(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_StandaloneCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(CypherParser.CALL)
            self.state = 485
            self.match(CypherParser.SP)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 486
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 487
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 490
                self.match(CypherParser.SP)
                self.state = 491
                self.match(CypherParser.YIELD)
                self.state = 492
                self.match(CypherParser.SP)
                self.state = 493
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_YieldItems" ):
                return visitor.visitOC_YieldItems(self)
            else:
                return visitor.visitChildren(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__4]:
                self.state = 496
                self.match(CypherParser.T__4)
                pass
            elif token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 497
                self.oC_YieldItem()
                self.state = 508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 498
                            self.match(CypherParser.SP)


                        self.state = 501
                        self.match(CypherParser.T__1)
                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 502
                            self.match(CypherParser.SP)


                        self.state = 505
                        self.oC_YieldItem() 
                    self.state = 510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 513
                    self.match(CypherParser.SP)


                self.state = 516
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_YieldItem" ):
                return visitor.visitOC_YieldItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 519
                self.oC_ProcedureResultField()
                self.state = 520
                self.match(CypherParser.SP)
                self.state = 521
                self.match(CypherParser.AS)
                self.state = 522
                self.match(CypherParser.SP)


            self.state = 526
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_With" ):
                return visitor.visitOC_With(self)
            else:
                return visitor.visitChildren(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CypherParser.WITH)
            self.state = 529
            self.oC_ProjectionBody()
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 530
                    self.match(CypherParser.SP)


                self.state = 533
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Return" ):
                return visitor.visitOC_Return(self)
            else:
                return visitor.visitChildren(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(CypherParser.RETURN)
            self.state = 537
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionBody" ):
                return visitor.visitOC_ProjectionBody(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 539
                    self.match(CypherParser.SP)


                self.state = 542
                self.match(CypherParser.DISTINCT)


            self.state = 545
            self.match(CypherParser.SP)
            self.state = 546
            self.oC_ProjectionItems()
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 547
                self.match(CypherParser.SP)
                self.state = 548
                self.oC_Order()


            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 551
                self.match(CypherParser.SP)
                self.state = 552
                self.oC_Skip()


            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 555
                self.match(CypherParser.SP)
                self.state = 556
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionItems" ):
                return visitor.visitOC_ProjectionItems(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.match(CypherParser.T__4)
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 560
                            self.match(CypherParser.SP)


                        self.state = 563
                        self.match(CypherParser.T__1)
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 564
                            self.match(CypherParser.SP)


                        self.state = 567
                        self.oC_ProjectionItem() 
                    self.state = 572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                pass
            elif token in [CypherParser.T__5, CypherParser.T__7, CypherParser.T__12, CypherParser.T__13, CypherParser.T__23, CypherParser.T__25, CypherParser.ALL, CypherParser.NOT, CypherParser.NULL, CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.TRUE, CypherParser.FALSE, CypherParser.EXISTS, CypherParser.CASE, CypherParser.StringLiteral, CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.HexLetter, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.oC_ProjectionItem()
                self.state = 584
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 574
                            self.match(CypherParser.SP)


                        self.state = 577
                        self.match(CypherParser.T__1)
                        self.state = 579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 578
                            self.match(CypherParser.SP)


                        self.state = 581
                        self.oC_ProjectionItem() 
                    self.state = 586
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionItem" ):
                return visitor.visitOC_ProjectionItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_ProjectionItem)
        try:
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.oC_Expression()
                self.state = 590
                self.match(CypherParser.SP)
                self.state = 591
                self.match(CypherParser.AS)
                self.state = 592
                self.match(CypherParser.SP)
                self.state = 593
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Order" ):
                return visitor.visitOC_Order(self)
            else:
                return visitor.visitChildren(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(CypherParser.ORDER)
            self.state = 599
            self.match(CypherParser.SP)
            self.state = 600
            self.match(CypherParser.BY)
            self.state = 601
            self.match(CypherParser.SP)
            self.state = 602
            self.oC_SortItem()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__1:
                self.state = 603
                self.match(CypherParser.T__1)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 604
                    self.match(CypherParser.SP)


                self.state = 607
                self.oC_SortItem()
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Skip" ):
                return visitor.visitOC_Skip(self)
            else:
                return visitor.visitChildren(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(CypherParser.L_SKIP)
            self.state = 614
            self.match(CypherParser.SP)
            self.state = 615
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Limit" ):
                return visitor.visitOC_Limit(self)
            else:
                return visitor.visitChildren(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(CypherParser.LIMIT)
            self.state = 618
            self.match(CypherParser.SP)
            self.state = 619
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SortItem" ):
                return visitor.visitOC_SortItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.oC_Expression()
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 622
                    self.match(CypherParser.SP)


                self.state = 625
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CypherParser.ASCENDING - 68)) | (1 << (CypherParser.ASC - 68)) | (1 << (CypherParser.DESCENDING - 68)) | (1 << (CypherParser.DESC - 68)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Where" ):
                return visitor.visitOC_Where(self)
            else:
                return visitor.visitChildren(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(CypherParser.WHERE)
            self.state = 629
            self.match(CypherParser.SP)
            self.state = 630
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Pattern" ):
                return visitor.visitOC_Pattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.oC_PatternPart()
            self.state = 643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 633
                        self.match(CypherParser.SP)


                    self.state = 636
                    self.match(CypherParser.T__1)
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 637
                        self.match(CypherParser.SP)


                    self.state = 640
                    self.oC_PatternPart() 
                self.state = 645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternPart" ):
                return visitor.visitOC_PatternPart(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.oC_Variable()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 647
                    self.match(CypherParser.SP)


                self.state = 650
                self.match(CypherParser.T__2)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 651
                    self.match(CypherParser.SP)


                self.state = 654
                self.oC_AnonymousPatternPart()
                pass
            elif token in [CypherParser.T__5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AnonymousPatternPart" ):
                return visitor.visitOC_AnonymousPatternPart(self)
            else:
                return visitor.visitChildren(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternElement" ):
                return visitor.visitOC_PatternElement(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.oC_NodePattern()
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 662
                            self.match(CypherParser.SP)


                        self.state = 665
                        self.oC_PatternElementChain() 
                    self.state = 670
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(CypherParser.T__5)
                self.state = 672
                self.oC_PatternElement()
                self.state = 673
                self.match(CypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodePattern" ):
                return visitor.visitOC_NodePattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(CypherParser.T__5)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 678
                self.match(CypherParser.SP)


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 681
                self.oC_Variable()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 682
                    self.match(CypherParser.SP)




            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__9:
                self.state = 687
                self.oC_NodeLabels()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 688
                    self.match(CypherParser.SP)




            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__23 or _la==CypherParser.T__25:
                self.state = 693
                self.oC_Properties()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 694
                    self.match(CypherParser.SP)




            self.state = 699
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternElementChain" ):
                return visitor.visitOC_PatternElementChain(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.oC_RelationshipPattern()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 702
                self.match(CypherParser.SP)


            self.state = 705
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipPattern" ):
                return visitor.visitOC_RelationshipPattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.oC_LeftArrowHead()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 708
                    self.match(CypherParser.SP)


                self.state = 711
                self.oC_Dash()
                self.state = 713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self.match(CypherParser.SP)


                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 715
                    self.oC_RelationshipDetail()


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 718
                    self.match(CypherParser.SP)


                self.state = 721
                self.oC_Dash()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 722
                    self.match(CypherParser.SP)


                self.state = 725
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.oC_LeftArrowHead()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 728
                    self.match(CypherParser.SP)


                self.state = 731
                self.oC_Dash()
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(CypherParser.SP)


                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 735
                    self.oC_RelationshipDetail()


                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 738
                    self.match(CypherParser.SP)


                self.state = 741
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.oC_Dash()
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 744
                    self.match(CypherParser.SP)


                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 747
                    self.oC_RelationshipDetail()


                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 750
                    self.match(CypherParser.SP)


                self.state = 753
                self.oC_Dash()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 754
                    self.match(CypherParser.SP)


                self.state = 757
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 759
                self.oC_Dash()
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 760
                    self.match(CypherParser.SP)


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.T__7:
                    self.state = 763
                    self.oC_RelationshipDetail()


                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 766
                    self.match(CypherParser.SP)


                self.state = 769
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipDetail" ):
                return visitor.visitOC_RelationshipDetail(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(CypherParser.T__7)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 774
                self.match(CypherParser.SP)


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 777
                self.oC_Variable()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 778
                    self.match(CypherParser.SP)




            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__9:
                self.state = 783
                self.oC_RelationshipTypes()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 784
                    self.match(CypherParser.SP)




            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__4:
                self.state = 789
                self.oC_RangeLiteral()


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__23 or _la==CypherParser.T__25:
                self.state = 792
                self.oC_Properties()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 793
                    self.match(CypherParser.SP)




            self.state = 798
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Properties" ):
                return visitor.visitOC_Properties(self)
            else:
                return visitor.visitChildren(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_Properties)
        try:
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.oC_MapLiteral()
                pass
            elif token in [CypherParser.T__25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipTypes" ):
                return visitor.visitOC_RelationshipTypes(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(CypherParser.T__9)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 805
                self.match(CypherParser.SP)


            self.state = 808
            self.oC_RelTypeName()
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 809
                        self.match(CypherParser.SP)


                    self.state = 812
                    self.match(CypherParser.T__10)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.T__9:
                        self.state = 813
                        self.match(CypherParser.T__9)


                    self.state = 817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 816
                        self.match(CypherParser.SP)


                    self.state = 819
                    self.oC_RelTypeName() 
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodeLabels" ):
                return visitor.visitOC_NodeLabels(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.oC_NodeLabel()
            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 826
                        self.match(CypherParser.SP)


                    self.state = 829
                    self.oC_NodeLabel() 
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodeLabel" ):
                return visitor.visitOC_NodeLabel(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(CypherParser.T__9)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 836
                self.match(CypherParser.SP)


            self.state = 839
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RangeLiteral" ):
                return visitor.visitOC_RangeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(CypherParser.T__4)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 842
                self.match(CypherParser.SP)


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (CypherParser.HexInteger - 97)) | (1 << (CypherParser.DecimalInteger - 97)) | (1 << (CypherParser.OctalInteger - 97)))) != 0):
                self.state = 845
                self.oC_IntegerLiteral()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 846
                    self.match(CypherParser.SP)




            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.T__11:
                self.state = 851
                self.match(CypherParser.T__11)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 852
                    self.match(CypherParser.SP)


                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (CypherParser.HexInteger - 97)) | (1 << (CypherParser.DecimalInteger - 97)) | (1 << (CypherParser.OctalInteger - 97)))) != 0):
                    self.state = 855
                    self.oC_IntegerLiteral()
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 856
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_LabelName" ):
                return visitor.visitOC_LabelName(self)
            else:
                return visitor.visitChildren(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelTypeName" ):
                return visitor.visitOC_RelTypeName(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Expression" ):
                return visitor.visitOC_Expression(self)
            else:
                return visitor.visitChildren(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_OrExpression" ):
                return visitor.visitOC_OrExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.oC_XorExpression()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.match(CypherParser.SP)
                    self.state = 871
                    self.match(CypherParser.OR)
                    self.state = 872
                    self.match(CypherParser.SP)
                    self.state = 873
                    self.oC_XorExpression() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_XorExpression" ):
                return visitor.visitOC_XorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.oC_AndExpression()
            self.state = 886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(CypherParser.SP)
                    self.state = 881
                    self.match(CypherParser.XOR)
                    self.state = 882
                    self.match(CypherParser.SP)
                    self.state = 883
                    self.oC_AndExpression() 
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AndExpression" ):
                return visitor.visitOC_AndExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.oC_NotExpression()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 890
                    self.match(CypherParser.SP)
                    self.state = 891
                    self.match(CypherParser.AND)
                    self.state = 892
                    self.match(CypherParser.SP)
                    self.state = 893
                    self.oC_NotExpression() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NotExpression" ):
                return visitor.visitOC_NotExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.NOT:
                self.state = 899
                self.match(CypherParser.NOT)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 900
                    self.match(CypherParser.SP)


                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 908
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ComparisonExpression" ):
                return visitor.visitOC_ComparisonExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.oC_AddOrSubtractExpression()
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 911
                        self.match(CypherParser.SP)


                    self.state = 914
                    self.oC_PartialComparisonExpression() 
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AddOrSubtractExpression" ):
                return visitor.visitOC_AddOrSubtractExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.oC_MultiplyDivideModuloExpression()
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 937
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 921
                            self.match(CypherParser.SP)


                        self.state = 924
                        self.match(CypherParser.T__12)
                        self.state = 926
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 925
                            self.match(CypherParser.SP)


                        self.state = 928
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 929
                            self.match(CypherParser.SP)


                        self.state = 932
                        self.match(CypherParser.T__13)
                        self.state = 934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 933
                            self.match(CypherParser.SP)


                        self.state = 936
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MultiplyDivideModuloExpression" ):
                return visitor.visitOC_MultiplyDivideModuloExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.oC_PowerOfExpression()
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 967
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 943
                            self.match(CypherParser.SP)


                        self.state = 946
                        self.match(CypherParser.T__4)
                        self.state = 948
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 947
                            self.match(CypherParser.SP)


                        self.state = 950
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 951
                            self.match(CypherParser.SP)


                        self.state = 954
                        self.match(CypherParser.T__14)
                        self.state = 956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 955
                            self.match(CypherParser.SP)


                        self.state = 958
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 959
                            self.match(CypherParser.SP)


                        self.state = 962
                        self.match(CypherParser.T__15)
                        self.state = 964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 963
                            self.match(CypherParser.SP)


                        self.state = 966
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PowerOfExpression" ):
                return visitor.visitOC_PowerOfExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 973
                        self.match(CypherParser.SP)


                    self.state = 976
                    self.match(CypherParser.T__16)
                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 977
                        self.match(CypherParser.SP)


                    self.state = 980
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullOperatorExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_UnaryAddOrSubtractExpression" ):
                return visitor.visitOC_UnaryAddOrSubtractExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CypherParser.T__12 or _la==CypherParser.T__13:
                self.state = 986
                _la = self._input.LA(1)
                if not(_la==CypherParser.T__12 or _la==CypherParser.T__13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 987
                    self.match(CypherParser.SP)


                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.oC_StringListNullOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_StringOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringOperatorExpressionContext,i)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_NullOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullOperatorExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullOperatorExpression" ):
                listener.enterOC_StringListNullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullOperatorExpression" ):
                listener.exitOC_StringListNullOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StringListNullOperatorExpression" ):
                return visitor.visitOC_StringListNullOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_StringListNullOperatorExpression(self):

        localctx = CypherParser.OC_StringListNullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_StringListNullOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.oC_PropertyOrLabelsExpression()
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1001
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 998
                        self.oC_StringOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 999
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1000
                        self.oC_NullOperatorExpression()
                        pass

             
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListOperatorExpression" ):
                return visitor.visitOC_ListOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(CypherParser.SP)
                self.state = 1007
                self.match(CypherParser.IN)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1008
                    self.match(CypherParser.SP)


                self.state = 1011
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1012
                    self.match(CypherParser.SP)


                self.state = 1015
                self.match(CypherParser.T__7)
                self.state = 1016
                self.oC_Expression()
                self.state = 1017
                self.match(CypherParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1019
                    self.match(CypherParser.SP)


                self.state = 1022
                self.match(CypherParser.T__7)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                    self.state = 1023
                    self.oC_Expression()


                self.state = 1026
                self.match(CypherParser.T__11)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                    self.state = 1027
                    self.oC_Expression()


                self.state = 1030
                self.match(CypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringOperatorExpression" ):
                listener.enterOC_StringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringOperatorExpression" ):
                listener.exitOC_StringOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StringOperatorExpression" ):
                return visitor.visitOC_StringOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_StringOperatorExpression(self):

        localctx = CypherParser.OC_StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_StringOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.match(CypherParser.SP)
                self.state = 1034
                self.match(CypherParser.STARTS)
                self.state = 1035
                self.match(CypherParser.SP)
                self.state = 1036
                self.match(CypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1037
                self.match(CypherParser.SP)
                self.state = 1038
                self.match(CypherParser.ENDS)
                self.state = 1039
                self.match(CypherParser.SP)
                self.state = 1040
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1041
                self.match(CypherParser.SP)
                self.state = 1042
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1045
                self.match(CypherParser.SP)


            self.state = 1048
            self.oC_PropertyOrLabelsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullOperatorExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullOperatorExpression" ):
                listener.enterOC_NullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullOperatorExpression" ):
                listener.exitOC_NullOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NullOperatorExpression" ):
                return visitor.visitOC_NullOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_NullOperatorExpression(self):

        localctx = CypherParser.OC_NullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_NullOperatorExpression)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.match(CypherParser.SP)
                self.state = 1051
                self.match(CypherParser.IS)
                self.state = 1052
                self.match(CypherParser.SP)
                self.state = 1053
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self.match(CypherParser.SP)
                self.state = 1055
                self.match(CypherParser.IS)
                self.state = 1056
                self.match(CypherParser.SP)
                self.state = 1057
                self.match(CypherParser.NOT)
                self.state = 1058
                self.match(CypherParser.SP)
                self.state = 1059
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyOrLabelsExpression" ):
                return visitor.visitOC_PropertyOrLabelsExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = CypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.oC_Atom()
            self.state = 1069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1063
                        self.match(CypherParser.SP)


                    self.state = 1066
                    self.oC_PropertyLookup() 
                self.state = 1071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1072
                    self.match(CypherParser.SP)


                self.state = 1075
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Atom" ):
                return visitor.visitOC_Atom(self)
            else:
                return visitor.visitChildren(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.match(CypherParser.COUNT)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1082
                    self.match(CypherParser.SP)


                self.state = 1085
                self.match(CypherParser.T__5)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1086
                    self.match(CypherParser.SP)


                self.state = 1089
                self.match(CypherParser.T__4)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1090
                    self.match(CypherParser.SP)


                self.state = 1093
                self.match(CypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1094
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1095
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1096
                self.match(CypherParser.ALL)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1097
                    self.match(CypherParser.SP)


                self.state = 1100
                self.match(CypherParser.T__5)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1101
                    self.match(CypherParser.SP)


                self.state = 1104
                self.oC_FilterExpression()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1105
                    self.match(CypherParser.SP)


                self.state = 1108
                self.match(CypherParser.T__6)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1110
                self.match(CypherParser.ANY)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1111
                    self.match(CypherParser.SP)


                self.state = 1114
                self.match(CypherParser.T__5)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1115
                    self.match(CypherParser.SP)


                self.state = 1118
                self.oC_FilterExpression()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1119
                    self.match(CypherParser.SP)


                self.state = 1122
                self.match(CypherParser.T__6)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1124
                self.match(CypherParser.NONE)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1125
                    self.match(CypherParser.SP)


                self.state = 1128
                self.match(CypherParser.T__5)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1129
                    self.match(CypherParser.SP)


                self.state = 1132
                self.oC_FilterExpression()
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1133
                    self.match(CypherParser.SP)


                self.state = 1136
                self.match(CypherParser.T__6)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1138
                self.match(CypherParser.SINGLE)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1139
                    self.match(CypherParser.SP)


                self.state = 1142
                self.match(CypherParser.T__5)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1143
                    self.match(CypherParser.SP)


                self.state = 1146
                self.oC_FilterExpression()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1147
                    self.match(CypherParser.SP)


                self.state = 1150
                self.match(CypherParser.T__6)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1152
                self.oC_RelationshipsPattern()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1153
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1154
                self.oC_FunctionInvocation()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1155
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Literal" ):
                return visitor.visitOC_Literal(self)
            else:
                return visitor.visitChildren(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_Literal)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger, CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.oC_NumberLiteral()
                pass
            elif token in [CypherParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [CypherParser.TRUE, CypherParser.FALSE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1160
                self.oC_BooleanLiteral()
                pass
            elif token in [CypherParser.NULL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1161
                self.match(CypherParser.NULL)
                pass
            elif token in [CypherParser.T__23]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.oC_MapLiteral()
                pass
            elif token in [CypherParser.T__7]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1163
                self.oC_ListLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_BooleanLiteral" ):
                return visitor.visitOC_BooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            _la = self._input.LA(1)
            if not(_la==CypherParser.TRUE or _la==CypherParser.FALSE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListLiteral" ):
                return visitor.visitOC_ListLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(CypherParser.T__7)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1169
                self.match(CypherParser.SP)


            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1172
                self.oC_Expression()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1173
                    self.match(CypherParser.SP)


                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1176
                    self.match(CypherParser.T__1)
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1177
                        self.match(CypherParser.SP)


                    self.state = 1180
                    self.oC_Expression()
                    self.state = 1182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1181
                        self.match(CypherParser.SP)


                    self.state = 1188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1191
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PartialComparisonExpression" ):
                return visitor.visitOC_PartialComparisonExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.match(CypherParser.T__2)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1194
                    self.match(CypherParser.SP)


                self.state = 1197
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(CypherParser.T__17)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1199
                    self.match(CypherParser.SP)


                self.state = 1202
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__18]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.match(CypherParser.T__18)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1204
                    self.match(CypherParser.SP)


                self.state = 1207
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__19]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1208
                self.match(CypherParser.T__19)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1209
                    self.match(CypherParser.SP)


                self.state = 1212
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__20]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1213
                self.match(CypherParser.T__20)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1214
                    self.match(CypherParser.SP)


                self.state = 1217
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [CypherParser.T__21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1218
                self.match(CypherParser.T__21)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1219
                    self.match(CypherParser.SP)


                self.state = 1222
                self.oC_AddOrSubtractExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ParenthesizedExpression" ):
                return visitor.visitOC_ParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(CypherParser.T__5)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1226
                self.match(CypherParser.SP)


            self.state = 1229
            self.oC_Expression()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1230
                self.match(CypherParser.SP)


            self.state = 1233
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipsPattern" ):
                return visitor.visitOC_RelationshipsPattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.oC_NodePattern()
            self.state = 1240 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1236
                        self.match(CypherParser.SP)


                    self.state = 1239
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1242 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FilterExpression" ):
                return visitor.visitOC_FilterExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.oC_IdInColl()
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1245
                    self.match(CypherParser.SP)


                self.state = 1248
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_IdInColl" ):
                return visitor.visitOC_IdInColl(self)
            else:
                return visitor.visitChildren(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.oC_Variable()
            self.state = 1252
            self.match(CypherParser.SP)
            self.state = 1253
            self.match(CypherParser.IN)
            self.state = 1254
            self.match(CypherParser.SP)
            self.state = 1255
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FunctionInvocation" ):
                return visitor.visitOC_FunctionInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.oC_FunctionName()
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1258
                self.match(CypherParser.SP)


            self.state = 1261
            self.match(CypherParser.T__5)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1262
                self.match(CypherParser.SP)


            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.DISTINCT:
                self.state = 1265
                self.match(CypherParser.DISTINCT)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1266
                    self.match(CypherParser.SP)




            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1271
                self.oC_Expression()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1272
                    self.match(CypherParser.SP)


                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1275
                    self.match(CypherParser.T__1)
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1276
                        self.match(CypherParser.SP)


                    self.state = 1279
                    self.oC_Expression()
                    self.state = 1281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1280
                        self.match(CypherParser.SP)


                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1290
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FunctionName" ):
                return visitor.visitOC_FunctionName(self)
            else:
                return visitor.visitChildren(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_FunctionName)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.oC_Namespace()
                self.state = 1293
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.EXISTS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.match(CypherParser.EXISTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ExplicitProcedureInvocation" ):
                return visitor.visitOC_ExplicitProcedureInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.oC_ProcedureName()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1299
                self.match(CypherParser.SP)


            self.state = 1302
            self.match(CypherParser.T__5)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1303
                self.match(CypherParser.SP)


            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__5) | (1 << CypherParser.T__7) | (1 << CypherParser.T__12) | (1 << CypherParser.T__13) | (1 << CypherParser.T__23) | (1 << CypherParser.T__25) | (1 << CypherParser.ALL))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CypherParser.NOT - 76)) | (1 << (CypherParser.NULL - 76)) | (1 << (CypherParser.COUNT - 76)) | (1 << (CypherParser.ANY - 76)) | (1 << (CypherParser.NONE - 76)) | (1 << (CypherParser.SINGLE - 76)) | (1 << (CypherParser.TRUE - 76)) | (1 << (CypherParser.FALSE - 76)) | (1 << (CypherParser.EXISTS - 76)) | (1 << (CypherParser.CASE - 76)) | (1 << (CypherParser.StringLiteral - 76)) | (1 << (CypherParser.HexInteger - 76)) | (1 << (CypherParser.DecimalInteger - 76)) | (1 << (CypherParser.OctalInteger - 76)) | (1 << (CypherParser.HexLetter - 76)) | (1 << (CypherParser.ExponentDecimalReal - 76)) | (1 << (CypherParser.RegularDecimalReal - 76)) | (1 << (CypherParser.FILTER - 76)) | (1 << (CypherParser.EXTRACT - 76)) | (1 << (CypherParser.UnescapedSymbolicName - 76)) | (1 << (CypherParser.EscapedSymbolicName - 76)))) != 0):
                self.state = 1306
                self.oC_Expression()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1307
                    self.match(CypherParser.SP)


                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1310
                    self.match(CypherParser.T__1)
                    self.state = 1312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1311
                        self.match(CypherParser.SP)


                    self.state = 1314
                    self.oC_Expression()
                    self.state = 1316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1315
                        self.match(CypherParser.SP)


                    self.state = 1322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1325
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ImplicitProcedureInvocation" ):
                return visitor.visitOC_ImplicitProcedureInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProcedureResultField" ):
                return visitor.visitOC_ProcedureResultField(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProcedureName" ):
                return visitor.visitOC_ProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.oC_Namespace()
            self.state = 1332
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Namespace" ):
                return visitor.visitOC_Namespace(self)
            else:
                return visitor.visitChildren(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1334
                    self.oC_SymbolicName()
                    self.state = 1335
                    self.match(CypherParser.T__22) 
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListComprehension" ):
                return visitor.visitOC_ListComprehension(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(CypherParser.T__7)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1343
                self.match(CypherParser.SP)


            self.state = 1346
            self.oC_FilterExpression()
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1347
                    self.match(CypherParser.SP)


                self.state = 1350
                self.match(CypherParser.T__10)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1351
                    self.match(CypherParser.SP)


                self.state = 1354
                self.oC_Expression()


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1357
                self.match(CypherParser.SP)


            self.state = 1360
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternComprehension" ):
                return visitor.visitOC_PatternComprehension(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(CypherParser.T__7)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1363
                self.match(CypherParser.SP)


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0):
                self.state = 1366
                self.oC_Variable()
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1367
                    self.match(CypherParser.SP)


                self.state = 1370
                self.match(CypherParser.T__2)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1371
                    self.match(CypherParser.SP)




            self.state = 1376
            self.oC_RelationshipsPattern()
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1377
                self.match(CypherParser.SP)


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.WHERE:
                self.state = 1380
                self.match(CypherParser.WHERE)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1381
                    self.match(CypherParser.SP)


                self.state = 1384
                self.oC_Expression()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1385
                    self.match(CypherParser.SP)




            self.state = 1390
            self.match(CypherParser.T__10)
            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1391
                self.match(CypherParser.SP)


            self.state = 1394
            self.oC_Expression()
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1395
                self.match(CypherParser.SP)


            self.state = 1398
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyLookup" ):
                return visitor.visitOC_PropertyLookup(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(CypherParser.T__22)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1401
                self.match(CypherParser.SP)


            self.state = 1404
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternatives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativesContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativesContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_CaseExpression" ):
                return visitor.visitOC_CaseExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1406
                self.match(CypherParser.CASE)
                self.state = 1411 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1407
                            self.match(CypherParser.SP)


                        self.state = 1410
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1413 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1415
                self.match(CypherParser.CASE)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1416
                    self.match(CypherParser.SP)


                self.state = 1419
                self.oC_Expression()
                self.state = 1424 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CypherParser.SP:
                            self.state = 1420
                            self.match(CypherParser.SP)


                        self.state = 1423
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1426 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                pass


            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1430
                    self.match(CypherParser.SP)


                self.state = 1433
                self.match(CypherParser.ELSE)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1434
                    self.match(CypherParser.SP)


                self.state = 1437
                self.oC_Expression()


            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1440
                self.match(CypherParser.SP)


            self.state = 1443
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternatives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternatives" ):
                listener.enterOC_CaseAlternatives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternatives" ):
                listener.exitOC_CaseAlternatives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_CaseAlternatives" ):
                return visitor.visitOC_CaseAlternatives(self)
            else:
                return visitor.visitChildren(self)




    def oC_CaseAlternatives(self):

        localctx = CypherParser.OC_CaseAlternativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_CaseAlternatives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(CypherParser.WHEN)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1446
                self.match(CypherParser.SP)


            self.state = 1449
            self.oC_Expression()
            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1450
                self.match(CypherParser.SP)


            self.state = 1453
            self.match(CypherParser.THEN)
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1454
                self.match(CypherParser.SP)


            self.state = 1457
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Variable" ):
                return visitor.visitOC_Variable(self)
            else:
                return visitor.visitChildren(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NumberLiteral" ):
                return visitor.visitOC_NumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.ExponentDecimalReal, CypherParser.RegularDecimalReal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1461
                self.oC_DoubleLiteral()
                pass
            elif token in [CypherParser.HexInteger, CypherParser.DecimalInteger, CypherParser.OctalInteger]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MapLiteral" ):
                return visitor.visitOC_MapLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.match(CypherParser.T__23)
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CypherParser.SP:
                self.state = 1466
                self.match(CypherParser.SP)


            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.UNION) | (1 << CypherParser.ALL) | (1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.AS) | (1 << CypherParser.MERGE) | (1 << CypherParser.ON) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE) | (1 << CypherParser.WITH) | (1 << CypherParser.RETURN) | (1 << CypherParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)) | (1 << (CypherParser.CONTAINS - 64)) | (1 << (CypherParser.IS - 64)) | (1 << (CypherParser.NULL - 64)) | (1 << (CypherParser.COUNT - 64)) | (1 << (CypherParser.ANY - 64)) | (1 << (CypherParser.NONE - 64)) | (1 << (CypherParser.SINGLE - 64)) | (1 << (CypherParser.TRUE - 64)) | (1 << (CypherParser.FALSE - 64)) | (1 << (CypherParser.EXISTS - 64)) | (1 << (CypherParser.CASE - 64)) | (1 << (CypherParser.ELSE - 64)) | (1 << (CypherParser.END - 64)) | (1 << (CypherParser.WHEN - 64)) | (1 << (CypherParser.THEN - 64)) | (1 << (CypherParser.HexLetter - 64)) | (1 << (CypherParser.CONSTRAINT - 64)) | (1 << (CypherParser.DO - 64)) | (1 << (CypherParser.FOR - 64)) | (1 << (CypherParser.REQUIRE - 64)) | (1 << (CypherParser.UNIQUE - 64)) | (1 << (CypherParser.MANDATORY - 64)) | (1 << (CypherParser.SCALAR - 64)) | (1 << (CypherParser.OF - 64)) | (1 << (CypherParser.ADD - 64)) | (1 << (CypherParser.DROP - 64)) | (1 << (CypherParser.FILTER - 64)) | (1 << (CypherParser.EXTRACT - 64)) | (1 << (CypherParser.UnescapedSymbolicName - 64)) | (1 << (CypherParser.EscapedSymbolicName - 64)))) != 0):
                self.state = 1469
                self.oC_PropertyKeyName()
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1470
                    self.match(CypherParser.SP)


                self.state = 1473
                self.match(CypherParser.T__9)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1474
                    self.match(CypherParser.SP)


                self.state = 1477
                self.oC_Expression()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CypherParser.SP:
                    self.state = 1478
                    self.match(CypherParser.SP)


                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CypherParser.T__1:
                    self.state = 1481
                    self.match(CypherParser.T__1)
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1482
                        self.match(CypherParser.SP)


                    self.state = 1485
                    self.oC_PropertyKeyName()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1486
                        self.match(CypherParser.SP)


                    self.state = 1489
                    self.match(CypherParser.T__9)
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1490
                        self.match(CypherParser.SP)


                    self.state = 1493
                    self.oC_Expression()
                    self.state = 1495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1494
                        self.match(CypherParser.SP)


                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1504
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Parameter" ):
                return visitor.visitOC_Parameter(self)
            else:
                return visitor.visitChildren(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.match(CypherParser.T__25)
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.state = 1507
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.DecimalInteger]:
                self.state = 1508
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyExpression" ):
                return visitor.visitOC_PropertyExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.oC_Atom()
            self.state = 1516 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CypherParser.SP:
                        self.state = 1512
                        self.match(CypherParser.SP)


                    self.state = 1515
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1518 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyKeyName" ):
                return visitor.visitOC_PropertyKeyName(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_IntegerLiteral" ):
                return visitor.visitOC_IntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & ((1 << (CypherParser.HexInteger - 97)) | (1 << (CypherParser.DecimalInteger - 97)) | (1 << (CypherParser.OctalInteger - 97)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_DoubleLiteral" ):
                return visitor.visitOC_DoubleLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            _la = self._input.LA(1)
            if not(_la==CypherParser.ExponentDecimalReal or _la==CypherParser.RegularDecimalReal):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SchemaName" ):
                return visitor.visitOC_SchemaName(self)
            else:
                return visitor.visitChildren(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_SchemaName)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CypherParser.COUNT, CypherParser.ANY, CypherParser.NONE, CypherParser.SINGLE, CypherParser.HexLetter, CypherParser.FILTER, CypherParser.EXTRACT, CypherParser.UnescapedSymbolicName, CypherParser.EscapedSymbolicName]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.oC_SymbolicName()
                pass
            elif token in [CypherParser.UNION, CypherParser.ALL, CypherParser.OPTIONAL, CypherParser.MATCH, CypherParser.UNWIND, CypherParser.AS, CypherParser.MERGE, CypherParser.ON, CypherParser.CREATE, CypherParser.SET, CypherParser.DETACH, CypherParser.DELETE, CypherParser.REMOVE, CypherParser.WITH, CypherParser.RETURN, CypherParser.DISTINCT, CypherParser.ORDER, CypherParser.BY, CypherParser.L_SKIP, CypherParser.LIMIT, CypherParser.ASCENDING, CypherParser.ASC, CypherParser.DESCENDING, CypherParser.DESC, CypherParser.WHERE, CypherParser.OR, CypherParser.XOR, CypherParser.AND, CypherParser.NOT, CypherParser.IN, CypherParser.STARTS, CypherParser.ENDS, CypherParser.CONTAINS, CypherParser.IS, CypherParser.NULL, CypherParser.TRUE, CypherParser.FALSE, CypherParser.EXISTS, CypherParser.CASE, CypherParser.ELSE, CypherParser.END, CypherParser.WHEN, CypherParser.THEN, CypherParser.CONSTRAINT, CypherParser.DO, CypherParser.FOR, CypherParser.REQUIRE, CypherParser.UNIQUE, CypherParser.MANDATORY, CypherParser.SCALAR, CypherParser.OF, CypherParser.ADD, CypherParser.DROP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1527
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ReservedWord" ):
                return visitor.visitOC_ReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.UNION) | (1 << CypherParser.ALL) | (1 << CypherParser.OPTIONAL) | (1 << CypherParser.MATCH) | (1 << CypherParser.UNWIND) | (1 << CypherParser.AS) | (1 << CypherParser.MERGE) | (1 << CypherParser.ON) | (1 << CypherParser.CREATE) | (1 << CypherParser.SET) | (1 << CypherParser.DETACH) | (1 << CypherParser.DELETE) | (1 << CypherParser.REMOVE) | (1 << CypherParser.WITH) | (1 << CypherParser.RETURN) | (1 << CypherParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CypherParser.ORDER - 64)) | (1 << (CypherParser.BY - 64)) | (1 << (CypherParser.L_SKIP - 64)) | (1 << (CypherParser.LIMIT - 64)) | (1 << (CypherParser.ASCENDING - 64)) | (1 << (CypherParser.ASC - 64)) | (1 << (CypherParser.DESCENDING - 64)) | (1 << (CypherParser.DESC - 64)) | (1 << (CypherParser.WHERE - 64)) | (1 << (CypherParser.OR - 64)) | (1 << (CypherParser.XOR - 64)) | (1 << (CypherParser.AND - 64)) | (1 << (CypherParser.NOT - 64)) | (1 << (CypherParser.IN - 64)) | (1 << (CypherParser.STARTS - 64)) | (1 << (CypherParser.ENDS - 64)) | (1 << (CypherParser.CONTAINS - 64)) | (1 << (CypherParser.IS - 64)) | (1 << (CypherParser.NULL - 64)) | (1 << (CypherParser.TRUE - 64)) | (1 << (CypherParser.FALSE - 64)) | (1 << (CypherParser.EXISTS - 64)) | (1 << (CypherParser.CASE - 64)) | (1 << (CypherParser.ELSE - 64)) | (1 << (CypherParser.END - 64)) | (1 << (CypherParser.WHEN - 64)) | (1 << (CypherParser.THEN - 64)) | (1 << (CypherParser.CONSTRAINT - 64)) | (1 << (CypherParser.DO - 64)) | (1 << (CypherParser.FOR - 64)) | (1 << (CypherParser.REQUIRE - 64)) | (1 << (CypherParser.UNIQUE - 64)) | (1 << (CypherParser.MANDATORY - 64)) | (1 << (CypherParser.SCALAR - 64)) | (1 << (CypherParser.OF - 64)) | (1 << (CypherParser.ADD - 64)) | (1 << (CypherParser.DROP - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SymbolicName" ):
                return visitor.visitOC_SymbolicName(self)
            else:
                return visitor.visitChildren(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (CypherParser.COUNT - 83)) | (1 << (CypherParser.ANY - 83)) | (1 << (CypherParser.NONE - 83)) | (1 << (CypherParser.SINGLE - 83)) | (1 << (CypherParser.HexLetter - 83)) | (1 << (CypherParser.FILTER - 83)) | (1 << (CypherParser.EXTRACT - 83)) | (1 << (CypherParser.UnescapedSymbolicName - 83)) | (1 << (CypherParser.EscapedSymbolicName - 83)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_LeftArrowHead" ):
                return visitor.visitOC_LeftArrowHead(self)
            else:
                return visitor.visitChildren(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__18) | (1 << CypherParser.T__26) | (1 << CypherParser.T__27) | (1 << CypherParser.T__28) | (1 << CypherParser.T__29))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RightArrowHead" ):
                return visitor.visitOC_RightArrowHead(self)
            else:
                return visitor.visitChildren(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__19) | (1 << CypherParser.T__30) | (1 << CypherParser.T__31) | (1 << CypherParser.T__32) | (1 << CypherParser.T__33))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Dash" ):
                return visitor.visitOC_Dash(self)
            else:
                return visitor.visitChildren(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CypherParser.T__13) | (1 << CypherParser.T__34) | (1 << CypherParser.T__35) | (1 << CypherParser.T__36) | (1 << CypherParser.T__37) | (1 << CypherParser.T__38) | (1 << CypherParser.T__39) | (1 << CypherParser.T__40) | (1 << CypherParser.T__41) | (1 << CypherParser.T__42) | (1 << CypherParser.T__43) | (1 << CypherParser.T__44))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





